<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lianghaijun的博客]]></title>
  <link href="http://lianghaijun.com/atom.xml" rel="self"/>
  <link href="http://lianghaijun.com/"/>
  <updated>2013-12-31T15:36:55+08:00</updated>
  <id>http://lianghaijun.com/</id>
  <author>
    <name><![CDATA[seavers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iteye 博客迁移]]></title>
    <link href="http://lianghaijun.com/blog/2013-12-31-iteye-blog-migration.html"/>
    <updated>2013-12-31T15:16:16+08:00</updated>
    <id>http://lianghaijun.com/blog/iteye-blog-migration</id>
    <content type="html"><![CDATA[<p>之前一直是在iteye上写博客的, 后来建立了本博客系统后, 就希望将博客从iteye上迁移过来</p>

<p>然而iteye上博客的文章太多了, 手动一篇一篇拷贝很不现实, 所以写了个工具来辅助迁移</p>

<p>iteye2markdown是一款博客迁移工具,可以将博客从iteye迁移至octopress</p>

<ul>
<li>此工具会自动下载iteye博客上的所有文章</li>
<li>接着会将博客中的bbcode代码转换成markdown</li>
<li>下载转换后的markdown可用于octopress,迁移至自己的博客系统上</li>
</ul>


<p>使用方式:</p>

<ul>
<li>修改download.rb中的cookie配置, cookie将用于连接iteye.com的后台系统, 下载博客内容</li>
<li>修改download.rb中的博客地址</li>
<li>使用以下命令</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby download.rb</span></code></pre></td></tr></table></div></figure>


<p>执行下载转换, 结果保存于blog目录中</p>

<p>源代码见:  <a href="https://github.com/seavers/iteye2markdown">github</a></p>

<p>核心代码如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>re 'open-uri'
</span><span class='line'>require 'nokogiri'
</span><span class='line'>
</span><span class='line'>def process(id, date)
</span><span class='line'>  host = 'http://seavers.iteye.com'
</span><span class='line'>  cookie = ''      #IO.read('cookie.txt')
</span><span class='line'>  agent = 'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.14 Safari/537.36'
</span><span class='line'>
</span><span class='line'>  html = open(host + '/admin/blogs/' + id + '/edit', 'User-Agent'=&gt;agent, 'Cookie'=&gt;cookie).read
</span><span class='line'>  doc = Nokogiri::HTML(html)
</span><span class='line'>
</span><span class='line'>  title = doc.search('#blog_title').attr('value').to_s
</span><span class='line'>  text = doc.search('#editor_body').text
</span><span class='line'>  category = doc.search('#blog_category_list').attr('value').to_s
</span><span class='line'>  tag = doc.search('#blog_tag_list').attr('value').to_s
</span><span class='line'>  
</span><span class='line'>
</span><span class='line'>  content = text
</span><span class='line'>      .gsub('[size=xx-large]', '#')
</span><span class='line'>      .gsub('[size=x-large]', '##')
</span><span class='line'>      .gsub('[size=large]', '###')
</span><span class='line'>      .gsub('[size=medium]', '####')
</span><span class='line'>      .gsub('[size=small]', '')
</span><span class='line'>      .gsub('[size=x-small]', '')
</span><span class='line'>      .gsub('[size=xx-small]', '')
</span><span class='line'>      .gsub('[/size]', '')
</span><span class='line'>      .gsub(/\[url=(.*)\](.*)\[\/url\]/, '[\2](\1)')
</span><span class='line'>      .gsub('[url]', '').gsub('[/url]', '')
</span><span class='line'>      .gsub('[b]', '*').gsub('[/b]', '*')
</span><span class='line'>      .gsub('[list]', '').gsub('[/list]', '')
</span><span class='line'>      .gsub('[b]', '*').gsub('[/b]', '*')
</span><span class='line'>      .gsub('[*]', '* ')
</span><span class='line'>      .gsub('[code]', '```').gsub('[ne/code]', '```')
</span><span class='line'>      .gsub(/\[code="(.*)"\]/, '```')
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  filename = date[0..9] + '-' + id + '.markdown'
</span><span class='line'>  File.open('blog/' + filename, 'w') { |file|
</span><span class='line'>      file.puts '---'
</span><span class='line'>      file.puts 'layout: post'
</span><span class='line'>      file.puts 'title: "' + title.to_s + '"'
</span><span class='line'>      file.puts 'date: ' + date + ':00 +0800'
</span><span class='line'>      file.puts 'comments: true'
</span><span class='line'>      file.puts 'categories:'
</span><span class='line'>      file.puts '- ' + category.to_s
</span><span class='line'>      file.puts 'tags:'
</span><span class='line'>      tag.split(',').each {|x|
</span><span class='line'>          file.puts '- ' + x
</span><span class='line'>      }
</span><span class='line'>      file.puts '---'
</span><span class='line'>
</span><span class='line'>      file.puts ''
</span><span class='line'>      file.puts content 
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def spider(page)
</span><span class='line'>  agent = 'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.14 Safari/537.36'
</span><span class='line'>
</span><span class='line'>  url = 'http://seavers.iteye.com/?page='+page.to_s
</span><span class='line'>  html = open(url, 'User-Agent'=&gt;agent)
</span><span class='line'>
</span><span class='line'>  doc = Nokogiri::HTML(html)
</span><span class='line'>  doc.search('.blog_main').each {|x|
</span><span class='line'>      id = x.search('h3 a').attr('href').text[/[0-9]+/, 0]
</span><span class='line'>      date = x.search('.blog_bottom .date').text
</span><span class='line'>      puts id + "\t" + date
</span><span class='line'>      process(id, date)
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  return doc.search('.pagination a.next_page').length == 0
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>##process('1416013', '2013-12-31 14:01')
</span><span class='line'>(1..100).each {|page|
</span><span class='line'>  break if spider(page)
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby spider]]></title>
    <link href="http://lianghaijun.com/blog/2013-12-23-ruby-spider.html"/>
    <updated>2013-12-23T21:19:09+08:00</updated>
    <id>http://lianghaijun.com/blog/ruby-spider</id>
    <content type="html"><![CDATA[<p>最近开始喜欢上研究ruby了,正好手头有一些抓取的需求,正好练练手</p>

<p>在写爬虫时,我们总希望能方便的实现以下功能</p>

<ul>
<li>类似curl的下载模块,提供URL即可获取下载内容</li>
<li>方便的网页分析工具,最好能提供类似css selector的元素选择器</li>
<li>简单方便的数据处理模块</li>
</ul>


<p>写个简单的例子</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#encoding:utf-8
</span><span class='line'>require 'open-uri'
</span><span class='line'>require 'nokogiri'
</span><span class='line'>
</span><span class='line'>def spide
</span><span class='line'>    url = "http://home.photo.qq.com/index.php?mod=activity&act=detail&category_id=1"
</span><span class='line'>
</span><span class='line'>    html = open(url).read
</span><span class='line'>    doc = Nokogiri::HTML(html)
</span><span class='line'>
</span><span class='line'>    list = doc.search('.photo-list li img')
</span><span class='line'>    list.each { |x|
</span><span class='line'>        src = x.attr('src')
</span><span class='line'>        puts src.gsub(/400/, '800');
</span><span class='line'>    }
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>spide</span></code></pre></td></tr></table></div></figure>


<p>其中:</p>

<ol>
<li>open-uri模块用于实现curl的功能, open后read即可</li>
<li>Nokogiri为html分析模块,支持css selector式的元素选择</li>
<li>而ruby本身的特点, 则可快速处理数据</li>
</ol>


<p>抓到图片URL后,剩下的就容易多了,都下载下来吧~~</p>

<p>&#8220;`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[全屏图片查看器 fullscreen picture viewer]]></title>
    <link href="http://lianghaijun.com/blog/2013-12-16-fullscreen-picture-viewer.html"/>
    <updated>2013-12-16T23:54:34+08:00</updated>
    <id>http://lianghaijun.com/blog/fullscreen-picture-viewer</id>
    <content type="html"><![CDATA[<h2>全屏图片查看器是一个chrome扩展</h2>

<p>  可以用于全屏查看图片,当查看网页时,按f键后,会隐藏掉网页里的其它内容,只留下大图</p>

<h2>举一些实际的使用场景</h2>

<ul>
<li>看一些图片时,发现旁边全是广告,直接屏蔽掉,只显示中间的大图</li>
<li>浏览壁纸时,全屏展示大图,用于观看全屏效果</li>
<li>查看所有的图片,直接寻找兴趣点</li>
</ul>


<h2>使用方式</h2>

<ul>
<li>双击网页内的空白区</li>
<li>按f键 (fullscreen的缩写)</li>
<li>按w/s按来调整threshold, 调整图片最小尺寸的阀值</li>
</ul>


<p>扩展下载: <a href="http://www.lianghaijun.com/download/fullscreen.crx">fullscreen.crx</a>
源码浏览: <a href="https://github.com/seavers/fullscreen">github</a></p>

<h2>试用</h2>

<ul>
<li>图片大小的默认阀值是350px</li>
<li>可以随便找个有大图的页面,按下f键体验一下</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hive 常用技巧]]></title>
    <link href="http://lianghaijun.com/blog/2013-12-13-hive-skill.html"/>
    <updated>2013-12-13T10:52:07+08:00</updated>
    <id>http://lianghaijun.com/blog/hive-skill</id>
    <content type="html"><![CDATA[<p>最近在使用hive来处理些大数据,偶有心得,记录之</p>

<p>建表</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>create external table hive_table (
</span><span class='line'>  id int,
</span><span class='line'>  name string,
</span><span class='line'>  category string,
</span><span class='line'>  tag string
</span><span class='line'>)
</span><span class='line'>PARTITIONED BY (pt string) 
</span><span class='line'>ROW FORMAT DELIMITED
</span><span class='line'>   FIELDS TERMINATED BY ',' 
</span><span class='line'>STORED AS TEXTFILE</span></code></pre></td></tr></table></div></figure>


<p>分组统计</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select id,name,count(*),
</span><span class='line'>  count(distinct category),collect_set(category),
</span><span class='line'>  count(distinct tag),collect_set(tag)
</span><span class='line'>from hive_table
</span><span class='line'>where pt='20131213'
</span><span class='line'>group by id,name</span></code></pre></td></tr></table></div></figure>


<p>拆分多行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select id,name,category_id
</span><span class='line'>from hive_table
</span><span class='line'>lateral view explode(split(category, ',')) category_table as category_id
</span><span class='line'>where pt='20131213'</span></code></pre></td></tr></table></div></figure>


<p>过滤某些行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select h.*
</span><span class='line'>from hive_table h
</span><span class='line'>left semi join
</span><span class='line'>girl_names g
</span><span class='line'>on h.name = g.name
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux repeat]]></title>
    <link href="http://lianghaijun.com/blog/2013-12-04-linux-repeat.html"/>
    <updated>2013-12-04T15:32:01+08:00</updated>
    <id>http://lianghaijun.com/blog/linux-repeat</id>
    <content type="html"><![CDATA[<p>linux下循环执行命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi ~/.bash_aliases</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repeat() {
</span><span class='line'>    n=100
</span><span class='line'>    s=1
</span><span class='line'>
</span><span class='line'>    while true; do
</span><span class='line'>        arg=$1
</span><span class='line'>        if [ "$arg" == "-n" ]; then
</span><span class='line'>            n=$2
</span><span class='line'>            shift
</span><span class='line'>            shift
</span><span class='line'>        elif [ "$arg" == "-s" ]; then
</span><span class='line'>            s=$2
</span><span class='line'>            shift
</span><span class='line'>            shift
</span><span class='line'>        else
</span><span class='line'>            break
</span><span class='line'>        fi
</span><span class='line'>    done
</span><span class='line'>
</span><span class='line'>    while [ $((n -= 1)) -ge 0 ]; do
</span><span class='line'>        "$@"
</span><span class='line'>        sleep $s
</span><span class='line'>    done
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source ~/.bash_aliases</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repeat ls -l
</span><span class='line'>repeat date
</span><span class='line'>repeat iostat
</span><span class='line'>repeat -n 3 curl 'http://www.lianghaijun.com'
</span><span class='line'>repeat -n 3 -s 300 curl 'http://www.lianghaijun.com'
</span><span class='line'>repeat -n 3 -s 0.5 sh -c "curl -I -s 'http://www.lianghaijun.com' | head -1"</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[utuntu group]]></title>
    <link href="http://lianghaijun.com/blog/2013-12-02-utuntu-group.html"/>
    <updated>2013-12-02T14:28:53+08:00</updated>
    <id>http://lianghaijun.com/blog/utuntu-group</id>
    <content type="html"><![CDATA[<p>linux用户管理中, 一直都有分组的概念, 然而我们总感觉使用场景较少, 其实是因为我们不了解</p>

<p>举个例子, 比如</p>

<ul>
<li> 在配置apache,nginx时, htdocs的目录权限, 遇到问题时, 我们总喜欢用 777,</li>
<li> 在使用samba, 或者 nfs 或者 ftp 时, 为避免复杂性, 也是 777</li>
<li> 是否希望将工作,生活的帐户体系分开, 是否希望, 使用不同的git环境</li>
</ul>


<h2>基础</h2>

<ul>
<li> 每个用户都有一个主分组, 以及多个次分组, 即一个用户可以属于多个分组</li>
</ul>


<h2>常用命令</h2>

<p>分组常用的几个操作</p>

<p>查看自己的分组</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>seavers@seavers:/home/admin$ id
</span><span class='line'>uid=1000(seavers) gid=1000(seavers) groups=1000(seavers),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),109(lpadmin),124(sambashare)</span></code></pre></td></tr></table></div></figure>


<p>查看所有的分组</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /etc/group</span></code></pre></td></tr></table></div></figure>


<p>查看某个用户所在的分组</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>groups seavers</span></code></pre></td></tr></table></div></figure>


<p>增加用户到某个分组</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>usermod seavers -a -G admin </span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress 自动部署方案]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-28-octopress-deploy.html"/>
    <updated>2013-11-28T22:20:52+08:00</updated>
    <id>http://lianghaijun.com/blog/octopress-deploy</id>
    <content type="html"><![CDATA[<p>今天准备实现 octopress 的自动部署, 完成以下功能</p>

<ul>
<li>在github.com提交markdown文件后,自动触发服务器打包更新</li>
<li>服务器打包更新后, 同步至github.io, 以及服务器展示</li>
</ul>


<p>实现之前, 参考了下这篇, <a href="http://imxylz.com/blog/2013/11/27/build-octopress-with-github-hook/">监听github，自动编译octopress博客</a>, 写的蛮不错的
不过, 我的方案, 有些不同的地方</p>

<h2>钩子</h2>

<p>在github的项目设置的Service Hooks中添加一个WebHook URLs的钩子</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://&lt;host&gt;:&lt;port&gt;/blog-update</span></code></pre></td></tr></table></div></figure>


<p>而github钩子, 我采用的是ruby, 命名为hook.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">server</span> <span class="o">=</span> <span class="no">TCPServer</span><span class="o">.</span><span class="n">open</span> <span class="mi">4001</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Listening on port &quot;</span> <span class="o">+</span> <span class="n">server</span><span class="o">.</span><span class="n">addr</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'>
</span><span class='line'><span class="kp">loop</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">client</span> <span class="o">=</span> <span class="n">server</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>  <span class="k">while</span><span class="p">((</span><span class="n">x</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">gets</span><span class="p">)</span> <span class="o">!=</span> <span class="s2">&quot;</span><span class="se">\r\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">x</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">client</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;HTTP/1.1 200 OK</span><span class="se">\r\n\r\n</span><span class="s2">OK&quot;</span>
</span><span class='line'>  <span class="n">client</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;OK&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">system</span><span class="p">(</span><span class="s1">&#39;git pull&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">system</span><span class="p">(</span><span class="s1">&#39;rake generate&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">##system(&#39;rake deploy&#39;)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后启动为后台进程</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="n">nohup</span> <span class="n">ruby</span> <span class="n">hook</span><span class="o">.</span><span class="n">rb</span> <span class="o">&amp;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当github更新时,会触发hook时, 服务器运行ruby代码,执行shell脚本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">pull</span>
</span><span class='line'><span class="n">rake</span> <span class="n">generate</span>
</span></code></pre></td></tr></table></div></figure>


<h2>部署</h2>

<p>那服务器上如何来更新呢, 部署的时候, 是有两种方案的,一种是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="n">preview</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后nginx代理转发至preview的端口</p>

<p>另一种方案是, nginx直接请求 _deploy 目录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">location</span> <span class="sr">/blog/</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">alias</span> <span class="o">~</span><span class="sr">/octopress/</span><span class="kp">public</span><span class="o">/</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>部署在github上</h2>

<p>当然, 如果想在github.io上部署, 需要再同步至github.io, 如在刚才在hook.rb里修改</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="n">deploy</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里要小心,这样改会死循环的.
deploy会触发git commit, commit再触发hook, hook里再deploy,再commit, 如此死循环
所以需要在hook里判断是master还是source</p>

<p>另一种解决方案, 就是把master与source, 放置在不同git仓库上
这样, 提交source的时候, 就不会触发blog的hook了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sed]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-28-sed.html"/>
    <updated>2013-11-28T16:50:01+08:00</updated>
    <id>http://lianghaijun.com/blog/sed</id>
    <content type="html"><![CDATA[<p>sed是基于行进行文本替换的神器, 这里记录一些自己常用的功能</p>

<p>直接替换</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  cat data.txt | sed 's/abc/def/g'</span></code></pre></td></tr></table></div></figure>


<p>删掉空行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  cat data.txt | sed '/^$/d'</span></code></pre></td></tr></table></div></figure>


<p>删除掉第一行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  cat data.txt | sed '1d'</span></code></pre></td></tr></table></div></figure>


<p>删除掉每行的第一个字符</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  cat data.txt | sed 's/^.//g'</span></code></pre></td></tr></table></div></figure>


<p>还有一些从<a href="http://baiqiuyi.com/linux/review-sed-command-for-unix-shell-book.html">其它地方</a>拷贝过来的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sed '1,3d' file //删除1-3行
</span><span class='line'>sed '/[Aa]bc/p' file //打印包含Abc或者abc的行
</span><span class='line'>sed '/ABC/d' //删除包含ABC的行
</span><span class='line'>sed '/ABC/!d' //不删除包含ABC的行
</span><span class='line'>sed '5,$d' //从第五行到最后一行全部删除
</span><span class='line'>sed 1q  //显示第一行
</span><span class='line'>sed 's/$/.../g' //每行的最后面添加 ...
</span><span class='line'>sed 's/d.(sk)/1&/g' //满足d*sk的单词,在单词前添加sk
</span><span class='line'>sed 's/&lt;[^&gt;]*&gt;//g' //去除html标签
</span><span class='line'>sed '/ABC/a123' //在包含ABC的行后面添加一行数值为123的行
</span><span class='line'>sed '/ABC/i123' //跟a不同的是i是插入当前行的前面
</span><span class='line'>sed '/ABC/c123' //包含ABC的行将更改为123
</span><span class='line'>sed '/ABC/{n;s/123/ABC/g}' //精确匹配包含ABC的下一行,将123全部替换成ABC
</span><span class='line'>sed '/ABC/{s/A/a/}' //在包含ABC的行将A替换成a
</span><span class='line'>sed -e '/ABC/h' -e '$g' //将包含ABC的行复制,在最后一行添加.
</span><span class='line'>sed -e '/ABC/{h;d}' -e '/123/G' //将包含ABC的行复制并删除,在包含123的行后添加.
</span><span class='line'>g等于在当前行覆盖,G是在符合条件的行后新增加一行.
</span><span class='line'>sed 's/^/ /g' //每行前面增加一个空格
</span><span class='line'>sed 's/.(.)$/*1/' //将倒数第二位换成*
</span><span class='line'>sed '/ABC/!s/1/*/g' //在不包含ABC的行里,将所有的1替换成*
</span><span class='line'>sed 's/1|2|3/*/g' //在GNU里将不管是1或2或者是3替换成*</span></code></pre></td></tr></table></div></figure>


<p>还有这个
<a href="http://henter.me/post/sed-notes.html">http://henter.me/post/sed-notes.html</a>
<a href="http://blog.csdn.net/hepeng597/article/details/11269387">http://blog.csdn.net/hepeng597/article/details/11269387</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[html5版仙剑]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-27-xianjian.html"/>
    <updated>2013-11-27T23:20:11+08:00</updated>
    <id>http://lianghaijun.com/blog/xianjian</id>
    <content type="html"><![CDATA[<p>刚学习html5时, 为了练手, 基于html5写了版仙剑, <a href="http://xianjian.github.com/">http://xianjian.github.com/</a></p>

<p>当时花了不少心血, 也解决了不少算法问题, 可用度80%, 然而后来比较忙, 就停止了</p>

<p>今天心血来潮, 在服务器上重新部署了一套, 欢迎试用 (图片点击右键, 新窗口打开)</p>

<p><a href="http://xianjian.u.qiniudn.com/"><img src="http://lianghaijun.com/uploads/xianjian.png" alt="xianjian" /></a></p>

<p>刚开始下载时, 速度有点慢, 请耐心等待, 后续再更改算法, 如果本地玩, 可以git clone哦~~</p>

<ul>
<li>在线试玩,可以使用<a href="http://xianjian.u.qiniudn.com">qiniudn</a> 或者 <a href="http://xianjian.github.com">github</a> 或者 <a href="http://www.lianghaijun.com/xianjian/">博客内</a></li>
<li>github地址在  <a href="https://github.com/seavers/xianjian">https://github.com/seavers/xianjian</a></li>
<li>其实还有一个java版的 <a href="https://github.com/seavers/pal">https://github.com/seavers/pal</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[about octopress]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-27-about-octopress.html"/>
    <updated>2013-11-27T18:30:41+08:00</updated>
    <id>http://lianghaijun.com/blog/about-octopress</id>
    <content type="html"><![CDATA[<p>一直以来, 都使用javaeye来记录博客, 见 <a href="http://seavers.iteye.com/">http://seavers.iteye.com/</a>, 偶有心得, 必记录之</p>

<p>然, 随着时间积累, 发现只依赖博客, 很多的需求无法满足, 如一个DEMO, 一个作品, 甚至是自定义样式
每遇新技术时, 总想折腾下, 无奈博客只能写写文字, 不能充分自主设计
现在好了, 服务器,域名 都已经OK了, 开始折腾了~~~</p>

<p>不过, 博客还是要先建起来, 前段时间, 曾折腾过 jekyll , 却半途而废了
今天突然发现 [<a href="http://www.ithans.com|yize">http://www.ithans.com|yize</a>] 改用 octopress 了, 尝试了下</p>

<p>发现 octopress 是基于ruby 写的, 还是挺好用的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake --help
</span><span class='line'>rake --tasks
</span><span class='line'>rake new_post[title]
</span><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>后续试试自动化, 外加git同步, 自动部署至服务器</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello octopress]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-27-hello-octopress.html"/>
    <updated>2013-11-27T17:56:47+08:00</updated>
    <id>http://lianghaijun.com/blog/hello-octopress</id>
    <content type="html"><![CDATA[<p>hello octopress</p>

<p>2013-11-27</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小清新网站标准]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-26-1981188.html"/>
    <updated>2013-11-26T23:19:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1981188</id>
    <content type="html"><![CDATA[<p><em>小清新网站标准</em>        纯属YY</p>

<ul>
<li>采用微博登录</li>
<li>提供iphone,android,html5版本</li>
<li>采用小新清设计原则:  色块背景, 图文混排, 配色明亮, 合适留白</li>
<li>新删改采用ajax请求, 支持滚动式翻页</li>
<li>restful url</li>
<li>icon式文字, 文字式按钮</li>
<li>赞, 评论, 分享, 收藏, 加关注</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wget 整站下载]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-26-1980761.html"/>
    <updated>2013-11-26T10:22:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1980761</id>
    <content type="html"><![CDATA[<p>下载整站</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -r -nv --restrict-file-names=nocontrol http://seavers.iteye.com/</span></code></pre></td></tr></table></div></figure>


<p>下载时可以加 -np, 不下载父目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -r -nv --restrict-file-names=nocontrol -np http://seavers.iteye.com/blog/</span></code></pre></td></tr></table></div></figure>


<p>下载时, 加入断点续传</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -r -nv -c --restrict-file-names=nocontrol http://seavers.iteye.com/</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>&mdash;restrict-file-names=nocontrol 用来解决中文乱码问题</p></li>
<li><p><a href="http://aotee.com/using-wget-recursive-download-the-entire-station">http://aotee.com/using-wget-recursive-download-the-entire-station</a></p></li>
<li><a href="http://www.cnblogs.com/lybeta/archive/2012/05/23/2514759.html">http://www.cnblogs.com/lybeta/archive/2012/05/23/2514759.html</a></li>
<li><a href="http://blog.csdn.net/flyskywhy/article/details/7777972">http://blog.csdn.net/flyskywhy/article/details/7777972</a></li>
<li><a href="http://www.butian.org/knowledge/linux/254.html">http://www.butian.org/knowledge/linux/254.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu ipconfig]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-06-1972028.html"/>
    <updated>2013-11-06T13:45:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1972028</id>
    <content type="html"><![CDATA[<p>sudo vi /sbin/ipconfig</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#! /bin/bash
</span><span class='line'>for word in `ifconfig eth0 | grep "inet addr" | sed  's/          inet addr/addr/g'`; do echo $word | sed 's/:/\t/g'; done
</span><span class='line'>route -n | awk '/UG/ {printf "gateway    %-21s %s\n", $2,$8}' ;
</span><span class='line'>grep nameserver /etc/resolv.conf ;</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo chmod +x /sbin/ipconfig
</span><span class='line'>
</span><span class='line'>ipconfig
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>待改进</p>

<ul>
<li>支持eth0 与 wlan0</li>
<li>支持dnsmasq</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu 注册 wins]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-06-1972001.html"/>
    <updated>2013-11-06T12:17:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1972001</id>
    <content type="html"><![CDATA[<p>以下是为了让ubuntu进入windows网络,实现互ping,互连</p>

<ol>
<li>ubuntu进入windows网络,必须安装samba</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install samba</span></code></pre></td></tr></table></div></figure>


<ol>
<li>修改/etc/samba/smb.conf, 将wins server修改为正确的ip
   可以在windows上, 敲入ipconfig /all得到具体ip</li>
<li>重启服务</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service nmbd restart</span></code></pre></td></tr></table></div></figure>


<ol>
<li>验证下</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmblookup -R -U &lt;wins_server_ip&gt; &lt;hostname&gt;</span></code></pre></td></tr></table></div></figure>


<ol>
<li>这时windows就可访问ubuntu,可以直接ping通</li>
<li>ubuntu互ping, 需要设置search domain</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo 'search abc.com' &gt;&gt; /etc/resolv.conf</span></code></pre></td></tr></table></div></figure>


<hr />

<ol>
<li>如果IP改变后, wins_server的缓存的ip不正确了,
可以删除以下两个文件
/var/cache/samba/wins.dat
/var/cache/samba/browse.dat
然后重启 nmbd 即可</li>
<li>如果ubuntu ping 时, ip仍然不正确, 检查下dns server
   (这块还没有搞清楚, 试试换备用server, 或者等等dns同步)</li>
<li></li>
</ol>


<hr />

<p>如果只是为了互连互通,只需要 nmbd 服务即可
如果还需要windows共享文件的服务, 需启动smbd</p>

<p>===========================================================</p>

<p>nsswitch.conf是SUN公司开发的一种扩充（name services switch）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># /etc/nsswitch.conf
</span><span class='line'>#
</span><span class='line'># Example configuration of GNU Name Service Switch functionality.
</span><span class='line'># If you have the `glibc-doc-reference' and `info' packages installed, try:
</span><span class='line'># `info libc "Name Service Switch"' for information about this file.
</span><span class='line'>
</span><span class='line'>aliases:    邮件别名, sendmail(8) 使用该文件. 
</span><span class='line'>ethers:     以太网号. 
</span><span class='line'>group:      用户组, getgrent(3) 函数使用该文件. 
</span><span class='line'>hosts:      主机名和主机号, gethostbyname(3) 以及类似的函数使用了该文件. 
</span><span class='line'>netgroup:   网络内主机及其用户的列表, 访问规则使用该文件. 
</span><span class='line'>network:    网络名及网络号, getnetent(3) 函数使用该文件. 
</span><span class='line'>passwd:     用户口令, getpwent(3) 函数使用该文件. 
</span><span class='line'>protocols:  网络协议, getprotoent(3) 函数使用该文件. 
</span><span class='line'>publickey:  NIS+及NFS 所使用的secure_rpc的公开密匙. 
</span><span class='line'>rpc:        远程过程调用名及调用号, getrpcbyname(3) 及类似函数使用该文件. 
</span><span class='line'>services:   网络服务, getservent(3) 函数使用该文件. 
</span><span class='line'>shadow:     shadow用户口令, getspnam(3) 函数使用该文件.</span></code></pre></td></tr></table></div></figure>


<p>=====================</p>

<p>hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4</p>

<ul>
<li>files:  /etc/hosts</li>
<li>mdns :  dnsmasq  avahi-daemon</li>
<li>dns  :  dns server</li>
</ul>


<p>===================</p>

<p>dnsmasq</p>

<p>Dnsmasq is a lightweight, easy to configure DNS forwarder and DHCP server.
<a href="https://wiki.archlinux.org/index.php/Dnsmasq_">https://wiki.archlinux.org/index.php/Dnsmasq_</a>(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</p>

<p>stop dnsmasq:
1. sudo vi /etc/NetworkManager/NetworkManager.conf
2. comment  dns=dnsmasq
3. sudo service network-manager restart</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu 五笔]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-04-1969731.html"/>
    <updated>2013-11-04T15:36:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1969731</id>
    <content type="html"><![CDATA[<p>ubuntu 使用五笔输入法
ubuntu 13.10 测试通过</p>

<ul>
<li>sudo apt-get install ibus-table-wubi</li>
<li>ibus-daemon -x -r -d</li>
<li>选择五笔输入,生效</li>
</ul>


<p>使用SHIFT+SPACE切换全半角
使用SHIFT切换中英文输入</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pycompile not found]]></title>
    <link href="http://lianghaijun.com/blog/2013-10-17-1959997.html"/>
    <updated>2013-10-17T16:10:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1959997</id>
    <content type="html"><![CDATA[<p>sudo apt-get remove python 后, 出现了很多错误, 导致后续的无法进行</p>

<p>pycompile not found
解决方案: 删掉 /usr/bin/pycompile, 然后继续apt-get -f install / remove</p>

<p>gconf2 not found 错误
sudo dpkg-reconfigure gconf2
sudo apt-get &mdash;purge remove gconf2</p>

<p>gconf2安装时 gconf-schemas not found
因安装gconf2时,需执行脚本,脚本中需要python,而python需要gconf2
导致了这个地方的问题</p>

<p>解决方案: 注掉报错的脚本中的那几行命令,然后重新执行
或:  如果已经安装了python的话, ln -s 下python即可</p>

<p>==============================</p>

<p>ubuntu从13.04升级至13.10时,报/usr/bin/python错误,不知原因
修改/usr/bin/python链接位置时,也无法通过
故直接remove python python3, 然后就出现上面的错误了
修复后, 可以执行do-release-upgrade了</p>

<p>ubuntu的包管理,要赞一下</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[maven的全局去除依赖]]></title>
    <link href="http://lianghaijun.com/blog/2013-09-22-1944892.html"/>
    <updated>2013-09-22T15:01:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1944892</id>
    <content type="html"><![CDATA[<p>我们在maven中有时候希望将某个依赖包彻底去除</p>

<p>如我们的系统使用的是spring3.1.2, 但是依赖的二方包中, 总是或多或少依赖了spring2.5.6, 希望有个方法, 能全局去除掉</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- globally exclusion --&gt;
</span><span class='line'>&lt;dependency&gt;
</span><span class='line'>  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>  &lt;artifactId&gt;spring&lt;/artifactId&gt;
</span><span class='line'>  &lt;version&gt;2.5.6.SEC03&lt;/version&gt;
</span><span class='line'>  &lt;scope&gt;provided&lt;/scope&gt;
</span><span class='line'>&lt;/dependency&gt;</span></code></pre></td></tr></table></div></figure>


<p>以上方式, 有个弊端, 就是eclipse中, 还是会依赖, 且容易用混</p>

<p>有三个方案(建议使用第三种)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dependency&gt;
</span><span class='line'>  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>  &lt;artifactId&gt;spring&lt;/artifactId&gt;
</span><span class='line'>  &lt;version&gt;99.0-does-not-exist&lt;/version&gt;
</span><span class='line'>  &lt;scope&gt;provided&lt;/scope&gt;
</span><span class='line'>&lt;/dependency&gt;</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dependency&gt;
</span><span class='line'>  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>  &lt;artifactId&gt;spring&lt;/artifactId&gt;
</span><span class='line'>  &lt;version&gt;2.5.6&lt;/version&gt;
</span><span class='line'>  &lt;scope&gt;system&lt;/scope&gt;
</span><span class='line'>  &lt;systemPath&gt;${basedir}/lib/empty.jar&lt;/systemPath&gt;
</span><span class='line'>&lt;/dependency&gt;</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>     &lt;plugin&gt;
</span><span class='line'>          &lt;artifactId&gt;maven-eclipse-plugin&lt;/artifactId&gt;
</span><span class='line'>          &lt;configuration&gt;
</span><span class='line'>              &lt;downloadSources&gt;true&lt;/downloadSources&gt;
</span><span class='line'>              &lt;downloadJavadocs&gt;true&lt;/downloadJavadocs&gt;
</span><span class='line'>              &lt;classpathContainers&gt;
</span><span class='line'>                  &lt;classpathContainer&gt;org.eclipse.jdt.launching.JRE_CONTAINER&lt;/classpathContainer&gt;
</span><span class='line'>              &lt;/classpathContainers&gt;
</span><span class='line'>              &lt;excludes&gt;
</span><span class='line'>                  &lt;exclude&gt;org.springframework:spring&lt;/exclude&gt;
</span><span class='line'>              &lt;/excludes&gt;
</span><span class='line'>          &lt;/configuration&gt;
</span><span class='line'>      &lt;/plugin&gt;</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Class.forName 返回 String[].class]]></title>
    <link href="http://lianghaijun.com/blog/2013-08-13-1923887.html"/>
    <updated>2013-08-13T11:38:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1923887</id>
    <content type="html"><![CDATA[<p>A: 如何通过Class.forName 返回 String[].class
Q: Class.forName(&ldquo;[Ljava.lang.String;&rdquo;)</p>

<p>因为 String[].class.getName() => &ldquo;[Ljava.lang.String;&rdquo;
经测试, 反过来, 也成立</p>

<p>因此:
在sqlmap-config.xml可以这样写</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;typeHandler javaType="[Ljava.util.String;" callback="xxxxxx.StringArrayTypeHandler" /&gt;</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ibatis typehandler]]></title>
    <link href="http://lianghaijun.com/blog/2013-08-09-1922745.html"/>
    <updated>2013-08-09T18:57:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1922745</id>
    <content type="html"><![CDATA[<p>今天配置typehandler时碰到一个问题</p>

<p>主要解决的问题是
java.sql.SQLException: Cannot convert value &lsquo;0000-00-00 00:00:00&rsquo; from column 18 to TIMESTAMP</p>

<p>解决方案: 替换掉系统默认的 typehandler, 抛出异常时,改为null</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="GBK"?&gt;
</span><span class='line'>&lt;!DOCTYPE sqlMapConfig
</span><span class='line'> PUBLIC "-//iBATIS.com//DTD SQL Map Config 2.0//EN"
</span><span class='line'> "http://www.ibatis.com/dtd/sql-map-config-2.dtd"&gt;
</span><span class='line'>&lt;sqlMapConfig&gt;
</span><span class='line'>  &lt;settings 
</span><span class='line'>      cacheModelsEnabled="true" 
</span><span class='line'>  /&gt;
</span><span class='line'>  &lt;typeHandler javaType="java.util.Date" callback="xxxxxxxxx.CustomDateTypeHandler" /&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;sqlMap resource="sqlmap/sqlmap-price.xml" /&gt; 
</span><span class='line'>&lt;/sqlMapConfig&gt;
</span></code></pre></td></tr></table></div></figure>


<p>这里需要注意的是</p>

<ol>
<li>typeHandler 中的 jdbcType 取值应为 null, DATE, TIME, 这里用的null</li>
<li>typehandler 必须要在 sqlmap 前面, 否则sqlmap中的类型handler就会用默认的</li>
</ol>


<p>下面是自定义的datetypehandler</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package xxxxxxxxx;
</span><span class='line'>
</span><span class='line'>import java.sql.CallableStatement;
</span><span class='line'>import java.sql.ResultSet;
</span><span class='line'>import java.sql.SQLException;
</span><span class='line'>
</span><span class='line'>import com.ibatis.sqlmap.engine.type.DateTypeHandler;
</span><span class='line'>
</span><span class='line'>public class CustomDateTypeHandler extends DateTypeHandler {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  @Override
</span><span class='line'>  public Object getResult(ResultSet rs, String columnName) throws SQLException {
</span><span class='line'>      try {
</span><span class='line'>          return super.getResult(rs, columnName);
</span><span class='line'>      } catch(SQLException e) {
</span><span class='line'>          if("S1009".equals(e.getSQLState())) {
</span><span class='line'>              return null;
</span><span class='line'>          }
</span><span class='line'>          throw e;
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Override
</span><span class='line'>  public Object getResult(ResultSet rs, int columnIndex) throws SQLException {
</span><span class='line'>      try {
</span><span class='line'>          return super.getResult(rs, columnIndex);
</span><span class='line'>      } catch(SQLException e) {
</span><span class='line'>          if("S1009".equals(e.getSQLState())) {
</span><span class='line'>              return null;
</span><span class='line'>          }
</span><span class='line'>          throw e;
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Override
</span><span class='line'>  public Object getResult(CallableStatement cs, int columnIndex) throws SQLException {
</span><span class='line'>      try {
</span><span class='line'>          return super.getResult(cs, columnIndex);
</span><span class='line'>      } catch(SQLException e) {
</span><span class='line'>          if("S1009".equals(e.getSQLState())) {
</span><span class='line'>              return null;
</span><span class='line'>          }
</span><span class='line'>          throw e;
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
