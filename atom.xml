<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lianghaijun的博客]]></title>
  <link href="http://lianghaijun.com/atom.xml" rel="self"/>
  <link href="http://lianghaijun.com/"/>
  <updated>2014-01-19T16:20:09+08:00</updated>
  <id>http://lianghaijun.com/</id>
  <author>
    <name><![CDATA[seavers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ruby语法糖 - 多返回值]]></title>
    <link href="http://lianghaijun.com/blog/2014-01-19-ruby-multiple-return.html"/>
    <updated>2014-01-19T13:01:18+08:00</updated>
    <id>http://lianghaijun.com/blog/ruby-multiple-return</id>
    <content type="html"><![CDATA[<p>前几天写代码的时候, 使用到了ruby的多返回值, 觉得很值得写一写</p>

<p>记得第一次看见多返回值, 是在lua中, 当时觉得不过是一语法糖, 没什么特别的, 并不会带来什么特别的好处, 就没有细细研究下去</p>

<p>多返回值, 比较经典的使用场景是交换数值, 最常用于排序等各类算法中, 比如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">list</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span><span class="n">list</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">list</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="p">,</span> <span class="n">list</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'><span class="n">width</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="n">height</span><span class="p">,</span> <span class="n">width</span>
</span></code></pre></td></tr></table></div></figure>


<p>而实际中, 我碰到的使用场景是这样的, 解析一个文本文件</p>

<p>常见的写法这样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;20140119_result.txt&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">lines</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>    <span class="n">words</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">id</span> <span class="o">=</span> <span class="n">words</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="nb">name</span> <span class="o">=</span> <span class="n">words</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="n">type</span> <span class="o">=</span> <span class="n">words</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>    <span class="n">status</span> <span class="o">=</span> <span class="n">words</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;[</span><span class="si">#{</span><span class="n">status</span><span class="si">}</span><span class="s2">] </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">type</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果用多返回值, 效果就完全不同了, 而且达到了相同的效果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;20140119_result.txt&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">lines</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">id</span><span class="p">,</span><span class="nb">name</span><span class="p">,</span><span class="n">type</span><span class="p">,</span><span class="n">status</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;[</span><span class="si">#{</span><span class="n">status</span><span class="si">}</span><span class="s2">] </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">type</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在java中, 经常见一些让我很痛苦的写法, 如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Result</span><span class="o">&lt;</span><span class="n">PairValue</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">NoSql</span><span class="o">.</span><span class="na">getValue</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span><span class="o">(!</span><span class="n">result</span><span class="o">.</span><span class="na">isSuccess</span> <span class="o">||</span> <span class="n">result</span><span class="o">.</span><span class="na">getResult</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">result</span><span class="o">.</span><span class="na">getResult</span><span class="o">().</span><span class="na">getValue</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;......&quot;</span><span class="o">,</span> <span class="n">result</span><span class="o">.</span><span class="na">getError</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Model</span> <span class="n">model</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getResult</span><span class="o">().</span><span class="na">getValue</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>单独看这行代码, 你觉得无所谓, 但是一个方法里, 只有四行逻辑, 但却有16行代码,其中12个是这种判断,你就是发疯了,看代码太累了,无法直接看到主要的逻辑</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">model</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="no">NoSql</span><span class="o">.</span><span class="n">getValue</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&quot;....&quot;</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span> <span class="k">if</span> <span class="n">err</span>
</span><span class='line'>
</span><span class='line'><span class="no">List</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="no">Service</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">itemIds</span><span class="p">)</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s2">&quot;....&quot;</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span> <span class="k">if</span> <span class="n">err</span>
</span></code></pre></td></tr></table></div></figure>


<p>纵观代码, 会把注意力集中到业务逻辑上, 而不是各种返回结果的判断上</p>

<h2>本质</h2>

<p>让我们来看看, ruby多返回值的本质</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">multi</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">multi</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">result</span><span class="o">.</span><span class="n">class</span>   <span class="c1">## Array</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">result</span> <span class="o">===</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="o">]</span>  <span class="c1">## true </span>
</span></code></pre></td></tr></table></div></figure>


<p>我们发现, 原来ruby的多返回值就是一个数组, 而且</p>

<ul>
<li>x=1,2,3,4,5,6 与 x=[1,2,3,4,5,6]  写法是一样的,结果也一样</li>
<li>x,y=1,2,3,4,5,6 与 x,y=[1,2,3,4,5,6]  写法也是一样的,结果也一样</li>
<li>不一样的一点是   [1,2,3,4,5,6].class 与  (1,2,3,4,5,6).class 是不一样的, 后面会报语法错误</li>
<li>因此, 不带中括号, 其实是一种简写的方式, 只是有些地方能简单, 有些地方无法简写</li>
<li>从另一个角度来看, []其实也是一种运算符号, 与()一样, 是为了提高运算符的优先级</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby Enumerator]]></title>
    <link href="http://lianghaijun.com/blog/2014-01-12-ruby-enumerable.html"/>
    <updated>2014-01-12T17:33:56+08:00</updated>
    <id>http://lianghaijun.com/blog/ruby-enumerable</id>
    <content type="html"><![CDATA[<p>之前看到这样的API文档</p>

<p>关于数组Array的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map { |item| block } → new_ary click to toggle source
</span><span class='line'>map → Enumerator
</span><span class='line'>Invokes the given block once for each element of self.
</span><span class='line'>
</span><span class='line'>Creates a new array containing the values returned by the block.
</span><span class='line'>
</span><span class='line'>See also Enumerable#collect.
</span><span class='line'>
</span><span class='line'>If no block is given, an Enumerator is returned instead.</span></code></pre></td></tr></table></div></figure>


<p>当时不明白, Array的map方法不带参数时返回 Enumerator, 而Array已经支持各类迭代操作了, 为什么还要返回Enumerator, 与数组的操作有什么区别呢, 当时没有细究, 今天知道了</p>

<!--more-->


<p>我们知道数组是继承自Enumerable的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>irb(main):077:0&gt; [].class.ancestors
</span><span class='line'>=&gt; [Array, Enumerable, Object, Kernel, BasicObject]</span></code></pre></td></tr></table></div></figure>


<p>数组中的方法, 会比Enumerable多一些数组特色的方法, 如insert,push,pop,fist,last</p>

<p>而Enumerable调用map时, 有一些常用的方法, 无法满足, 比如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2,3,5,7,9,11].map {|item,index| item+index}</span></code></pre></td></tr></table></div></figure>


<p>map时, 参数中的第一个参数, 为item, 但是不支持索引位置</p>

<p>而像select, count, reject 等方法时, 同样也不支持索引位置</p>

<p>于是Enumerator发挥作用了, 注意这里不是Enumerable</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>irb(main):071:0&gt; [].map.methods - [].methods
</span><span class='line'>=&gt; [:with_index, :with_object, :next_values, :peek_values, :next, :peek, :feed, :rewind]</span></code></pre></td></tr></table></div></figure>


<p>所以</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>irb(main):109:0&gt; [2,3,5,7,9,11].map.with_index {|item,index| item+index}
</span><span class='line'>=&gt; [2, 4, 7, 10, 13, 16]</span></code></pre></td></tr></table></div></figure>


<p>结论: Array中map,select,count,reject时, 如果不带闭包参数, 将返回Enumerator, 这时可继续使用索引参数</p>

<p>这里是ruby的官方文档, <a href="http://ruby-doc.org/core-1.9.3/Enumerator.html">Enumerator的API</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby 字符串与数组]]></title>
    <link href="http://lianghaijun.com/blog/2014-01-05-ruby-string-array.html"/>
    <updated>2014-01-05T18:55:00+08:00</updated>
    <id>http://lianghaijun.com/blog/ruby-string-array</id>
    <content type="html"><![CDATA[<p>ruby的字符串与数组,在API设计上,有很多的相似之处,同时方法广度上,又有所区分,这里还是有很多学问</p>

<!--more-->


<p>字符串在底层上是字符的数组, 同是数组, 我们先从相同点开始</p>

<h3>比较方法名</h3>

<p>让我们先单纯的比较一下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'string'.methods.length   ### 161
</span><span class='line'>('string'.methods - Object.new.methods).length   ## 107
</span><span class='line'>
</span><span class='line'>[].methods.length         ### 167
</span><span class='line'>([].methods - Object.new.methods).length   ## 113
</span><span class='line'>
</span><span class='line'>([].methods & 'string'.methods).length    ## 76
</span><span class='line'>([].methods & 'string'.methods - Object.new.methods).length  ## 22
</span><span class='line'>
</span><span class='line'>[].methods & 'string'.methods - Object.new.methods
</span><span class='line'>[:[], :[]=, :concat, :&lt;&lt;, :insert, :length, :size, :empty?, :index, :rindex, :reverse, :reverse!, :delete, :replace, :clear, :include?, :slice, :slice!, :+, :*, :count, :partition]</span></code></pre></td></tr></table></div></figure>


<ul>
<li>字符串共有161个方法,去掉继承后, 剩107个</li>
<li>数组共有167个方法,去掉继承后,剩113个</li>
<li>字符串与数组相同的方法,共有76,去掉继承的54个, 只剩22个</li>
</ul>


<p>让我们来仔细看看这22个方法</p>

<ul>
<li>[],[]=, 下标操作</li>
<li>[],slice,slice! 子字符串,子数组操作</li>
<li>&lt;&lt;,insert,+,*       插入操作</li>
<li>length,size,count,empty?   大小计算</li>
<li>index,rindex,include?    查找</li>
<li>reverse, reverse!  反转</li>
<li>delete,clear          删除</li>
<li>partition         拆分 (数组中没找到此方法????)</li>
</ul>


<p>汇总起来, 就是 增删改查, 子反转,大小</p>

<h3>字符串</h3>

<p>而字符串中去掉数组的方法, 就是真正的字符串操作了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>irb(main):026:0&gt; 'string'.methods - [].methods
</span><span class='line'>=&gt; [:casecmp, :%, :bytesize, :match, :succ, :succ!, :next, :next!, :upto, :chr, :getbyte, :setbyte, :byteslice, :to_i, :to_f, :to_str, :dump, :upcase, :downcase, :capitalize, :swapcase, :upcase!, :downcase!, :capitalize!, :swapcase!, :hex, :oct, :split, :lines, :bytes, :chars, :codepoints, :prepend, :crypt, :intern, :to_sym, :ord, :start_with?, :end_with?, :scan, :ljust, :rjust, :center, :sub, :gsub, :chop, :chomp, :strip, :lstrip, :rstrip, :sub!, :gsub!, :chop!, :chomp!, :strip!, :lstrip!, :rstrip!, :tr, :tr_s, :squeeze, :tr!, :tr_s!, :delete!, :squeeze!, :each_line, :each_byte, :each_char, :each_codepoint, :sum, :rpartition, :encoding, :force_encoding, :b, :valid_encoding?, :ascii_only?, :unpack, :encode, :encode!, :to_r, :to_c, :&gt;, :&gt;=, :&lt;, :&lt;=, :between?]</span></code></pre></td></tr></table></div></figure>


<p>其中: getbyte,setbyte,byteslice,split,bytes,chars,codepoints,prepend,start_with?,end_with? ,sub,gsub,sub!,gsub!,delete!,each_line,each_byte,each_char,each_codepoint 等等,其实也是围绕这个概念,派生出来的方法,都是在&#8221;部分&#8221;,&ldquo;全体&rdquo;, 在这个概念上生成的方法</p>

<p>而to_i, to_f, hex, &lt; > 等, 这些是属于转换与比较的方法, 另upcase,downcase 是字符串间的转换</p>

<p>除去这个概念后, 与字符串本质有关的方法, 只有encoding,force_encoding 这几个方法了</p>

<p>所以字符串的方法, 我们可以归结为三类</p>

<ul>
<li>字符数组, 数组的操作方法</li>
<li>转换与比较</li>
<li>编码相关</li>
</ul>


<h3>数组</h3>

<p>让我们再来看看数组</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>irb(main):031:0&gt; [].methods - 'string'.methods
</span><span class='line'>=&gt; [:to_a, :to_ary, :at, :fetch, :first, :last, :push, :pop, :shift, :unshift, :each, :each_index, :reverse_each, :find_index, :join, :rotate, :rotate!, :sort, :sort!, :sort_by!, :collect, :collect!, :map, :map!, :select, :select!, :keep_if, :values_at, :delete_at, :delete_if, :reject, :reject!, :zip, :transpose, :fill, :assoc, :rassoc, :-, :&, :|, :uniq, :uniq!, :compact, :compact!, :flatten, :flatten!, :shuffle!, :shuffle, :sample, :cycle, :permutation, :combination, :repeated_permutation, :repeated_combination, :product, :take, :take_while, :drop, :drop_while, :bsearch, :pack, :entries, :sort_by, :grep, :find, :detect, :find_all, :flat_map, :collect_concat, :inject, :reduce, :group_by, :all?, :any?, :one?, :none?, :min, :max, :minmax, :min_by, :max_by, :minmax_by, :member?, :each_with_index, :each_entry, :each_slice, :each_cons, :each_with_object, :chunk, :slice_before, :lazy]</span></code></pre></td></tr></table></div></figure>


<p>我们再来分下组</p>

<ul>
<li>常用的增删改查, 子反转,大小</li>
<li>同样的转换与比较  to_a</li>
<li>单项相关,   at,first,last,pop,min,max,take</li>
<li>遍历,     each,each_index, collect, map,select, take_while,drop_while,grep,find,find_all,reduce,all?,any?,one?, each_*</li>
</ul>


<h3>后续</h3>

<p>我们可以看出,在数组中有很多方法,并没有在字符串中体现,字符串中部分数组的方法,必定是最常用</p>

<p>假如,数组里所有的方法,都放在字符串中,虽然行得通,但并不好,相反不好理解, 比如string.grep,实际意义不大</p>

<p>所以我们现在可以理解, 为什么 String 不是直接继承自 Array 了, 因为Array并不是String的核心, String中最核心的应该是别的, 比如字符与编码</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby 学习笔记]]></title>
    <link href="http://lianghaijun.com/blog/2014-01-04-ruby-study-notes.html"/>
    <updated>2014-01-04T21:39:33+08:00</updated>
    <id>http://lianghaijun.com/blog/ruby-study-notes</id>
    <content type="html"><![CDATA[

<p>学习ruby已经有一段时间了, 抽点时间把常用的语法方法总结一下, 算是入门小笔记吧</p>

<!--more-->


<h2>简述</h2>

<ul>
<li>ruby为动态语言,弱类型,一切皆对象(就是可以.)</li>
<li>ruby没有属性,只有方法,看似属性的,其实都只是其成员变量的读方法</li>
<li>ruby调用方法时括号可省略, 行尾无分号, return 关键字可省略</li>
<li>ruby支持[]语法创建变长数组, {}语法创建Hash对象, 支持闭包</li>
</ul>


<h2>常用的语法结构</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#encoding:utf-8</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;nokogiri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># comment</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">page</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">page</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">i</span><span class="o">.</span><span class="n">to_s</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">step</span> <span class="k">in</span> <span class="o">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span><span class="s1">&#39;two&#39;</span><span class="p">,</span><span class="s1">&#39;three&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">process</span><span class="p">(</span><span class="n">step</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;echo </span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">each_index</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;echo </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2"> -&gt; </span><span class="si">#{</span><span class="n">list</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">nilisnull</span>
</span><span class='line'>  <span class="kp">nil</span><span class="o">.</span><span class="n">to_s</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">x</span>
</span><span class='line'><span class="k">when</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span>              <span class="c1">#匹配数字</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;First branch&quot;</span>
</span><span class='line'><span class="k">when</span> <span class="n">foobar</span><span class="p">()</span>           <span class="c1">#批量方法返回的值</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Second branch&quot;</span>
</span><span class='line'><span class="k">when</span> <span class="sr">/^hel.*/</span>           <span class="c1">#匹配正则表达式</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Third branch&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Last branch&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>方法符号</h2>

<p>语法上除了一些常见的顺序,选择,循环,变量,函数,模块,类, 还有一些特有的内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 查看一个变量可以调用哪些方法</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mi">108</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="s1">&#39;string&#39;</span><span class="o">.</span><span class="n">methods</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:&lt;=&gt;</span><span class="p">,</span> <span class="ss">:==</span><span class="p">,</span> <span class="ss">:===</span><span class="p">,</span> <span class="ss">:eql?</span><span class="p">,</span> <span class="ss">:hash</span><span class="p">,</span> <span class="ss">:casecmp</span><span class="p">,</span> <span class="ss">:+</span><span class="p">,</span> <span class="ss">:*</span><span class="p">,</span> <span class="ss">:%</span><span class="p">,</span> <span class="ss">:[]</span><span class="p">,</span> <span class="ss">:[]=</span><span class="p">,</span> <span class="ss">:insert</span><span class="p">,</span> <span class="ss">:length</span><span class="p">,</span> <span class="ss">:size</span><span class="p">,</span> <span class="ss">:bytesize</span><span class="p">,</span> <span class="ss">:empty?</span><span class="p">,</span> <span class="p">:</span><span class="o">=~</span><span class="p">,</span> <span class="ss">:match</span><span class="p">,</span> <span class="ss">:succ</span><span class="p">,</span> <span class="ss">:succ!</span><span class="p">,</span> <span class="ss">:next</span><span class="p">,</span> <span class="ss">:next!</span><span class="p">,</span> <span class="ss">:upto</span><span class="p">,</span> <span class="ss">:index</span><span class="p">,</span> <span class="ss">:rindex</span><span class="p">,</span> <span class="ss">:replace</span><span class="p">,</span> <span class="ss">:clear</span><span class="p">,</span> <span class="ss">:chr</span><span class="p">,</span> <span class="ss">:getbyte</span><span class="p">,</span> <span class="ss">:setbyte</span><span class="p">,</span> <span class="ss">:byteslice</span><span class="p">,</span> <span class="ss">:to_i</span><span class="p">,</span> <span class="ss">:to_f</span><span class="p">,</span> <span class="ss">:to_s</span><span class="p">,</span> <span class="ss">:to_str</span><span class="p">,</span> <span class="ss">:inspect</span><span class="p">,</span> <span class="ss">:dump</span><span class="p">,</span> <span class="ss">:upcase</span><span class="p">,</span> <span class="ss">:downcase</span><span class="p">,</span> <span class="ss">:capitalize</span><span class="p">,</span> <span class="ss">:swapcase</span><span class="p">,</span> <span class="ss">:upcase!</span><span class="p">,</span> <span class="ss">:downcase!</span><span class="p">,</span> <span class="ss">:capitalize!</span><span class="p">,</span> <span class="ss">:swapcase!</span><span class="p">,</span> <span class="ss">:hex</span><span class="p">,</span> <span class="ss">:oct</span><span class="p">,</span> <span class="ss">:split</span><span class="p">,</span> <span class="ss">:lines</span><span class="p">,</span> <span class="ss">:bytes</span><span class="p">,</span> <span class="ss">:chars</span><span class="p">,</span> <span class="ss">:codepoints</span><span class="p">,</span> <span class="ss">:reverse</span><span class="p">,</span> <span class="ss">:reverse!</span><span class="p">,</span> <span class="ss">:concat</span><span class="p">,</span> <span class="ss">:&lt;&lt;</span><span class="p">,</span> <span class="ss">:prepend</span><span class="p">,</span> <span class="ss">:crypt</span><span class="p">,</span> <span class="ss">:intern</span><span class="p">,</span> <span class="ss">:to_sym</span><span class="p">,</span> <span class="ss">:ord</span><span class="p">,</span> <span class="ss">:include?</span><span class="p">,</span> <span class="ss">:start_with?</span><span class="p">,</span> <span class="ss">:end_with?</span><span class="p">,</span> <span class="ss">:scan</span><span class="p">,</span> <span class="ss">:ljust</span><span class="p">,</span> <span class="ss">:rjust</span><span class="p">,</span> <span class="ss">:center</span><span class="p">,</span> <span class="ss">:sub</span><span class="p">,</span> <span class="ss">:gsub</span><span class="p">,</span> <span class="ss">:chop</span><span class="p">,</span> <span class="ss">:chomp</span><span class="p">,</span> <span class="ss">:strip</span><span class="p">,</span> <span class="ss">:lstrip</span><span class="p">,</span> <span class="ss">:rstrip</span><span class="p">,</span> <span class="ss">:sub!</span><span class="p">,</span> <span class="ss">:gsub!</span><span class="p">,</span> <span class="ss">:chop!</span><span class="p">,</span> <span class="ss">:chomp!</span><span class="p">,</span> <span class="ss">:strip!</span><span class="p">,</span> <span class="ss">:lstrip!</span><span class="p">,</span> <span class="ss">:rstrip!</span><span class="p">,</span> <span class="ss">:tr</span><span class="p">,</span> <span class="ss">:tr_s</span><span class="p">,</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">:squeeze</span><span class="p">,</span> <span class="ss">:count</span><span class="p">,</span> <span class="ss">:tr!</span><span class="p">,</span> <span class="ss">:tr_s!</span><span class="p">,</span> <span class="ss">:delete!</span><span class="p">,</span> <span class="ss">:squeeze!</span><span class="p">,</span> <span class="ss">:each_line</span><span class="p">,</span> <span class="ss">:each_byte</span><span class="p">,</span> <span class="ss">:each_char</span><span class="p">,</span> <span class="ss">:each_codepoint</span><span class="p">,</span> <span class="ss">:sum</span><span class="p">,</span> <span class="ss">:slice</span><span class="p">,</span> <span class="ss">:slice!</span><span class="p">,</span> <span class="ss">:partition</span><span class="p">,</span> <span class="ss">:rpartition</span><span class="p">,</span> <span class="ss">:encoding</span><span class="p">,</span> <span class="ss">:force_encoding</span><span class="p">,</span> <span class="ss">:b</span><span class="p">,</span> <span class="ss">:valid_encoding?</span><span class="p">,</span> <span class="ss">:ascii_only?</span><span class="p">,</span> <span class="ss">:unpack</span><span class="p">,</span> <span class="ss">:encode</span><span class="p">,</span> <span class="ss">:encode!</span><span class="p">,</span> <span class="ss">:to_r</span><span class="p">,</span> <span class="ss">:to_c</span><span class="p">,</span> <span class="ss">:&gt;</span><span class="p">,</span> <span class="ss">:&gt;=</span><span class="p">,</span> <span class="p">:</span><span class="o">&lt;</span><span class="p">,</span> <span class="p">:</span><span class="o">&lt;=</span><span class="p">,</span> <span class="ss">:between?</span><span class="p">,</span> <span class="ss">:nil?</span><span class="p">,</span> <span class="p">:</span><span class="o">!~</span><span class="p">,</span> <span class="ss">:class</span><span class="p">,</span> <span class="ss">:singleton_class</span><span class="p">,</span> <span class="ss">:clone</span><span class="p">,</span> <span class="ss">:dup</span><span class="p">,</span> <span class="ss">:taint</span><span class="p">,</span> <span class="ss">:tainted?</span><span class="p">,</span> <span class="ss">:untaint</span><span class="p">,</span> <span class="ss">:untrust</span><span class="p">,</span> <span class="ss">:untrusted?</span><span class="p">,</span> <span class="ss">:trust</span><span class="p">,</span> <span class="ss">:freeze</span><span class="p">,</span> <span class="ss">:frozen?</span><span class="p">,</span> <span class="ss">:methods</span><span class="p">,</span> <span class="ss">:singleton_methods</span><span class="p">,</span> <span class="ss">:protected_methods</span><span class="p">,</span> <span class="ss">:private_methods</span><span class="p">,</span> <span class="ss">:public_methods</span><span class="p">,</span> <span class="ss">:instance_variables</span><span class="p">,</span> <span class="ss">:instance_variable_get</span><span class="p">,</span> <span class="ss">:instance_variable_set</span><span class="p">,</span> <span class="ss">:instance_variable_defined?</span><span class="p">,</span> <span class="ss">:remove_instance_variable</span><span class="p">,</span> <span class="ss">:instance_of?</span><span class="p">,</span> <span class="ss">:kind_of?</span><span class="p">,</span> <span class="ss">:is_a?</span><span class="p">,</span> <span class="ss">:tap</span><span class="p">,</span> <span class="ss">:send</span><span class="p">,</span> <span class="ss">:public_send</span><span class="p">,</span> <span class="ss">:respond_to?</span><span class="p">,</span> <span class="ss">:extend</span><span class="p">,</span> <span class="ss">:display</span><span class="p">,</span> <span class="ss">:method</span><span class="p">,</span> <span class="ss">:public_method</span><span class="p">,</span> <span class="ss">:define_singleton_method</span><span class="p">,</span> <span class="ss">:object_id</span><span class="p">,</span> <span class="ss">:to_enum</span><span class="p">,</span> <span class="ss">:enum_for</span><span class="p">,</span> <span class="ss">:equal?</span><span class="p">,</span> <span class="p">:</span><span class="o">!</span><span class="p">,</span> <span class="p">:</span><span class="o">!=</span><span class="p">,</span> <span class="ss">:instance_eval</span><span class="p">,</span> <span class="ss">:instance_exec</span><span class="p">,</span> <span class="ss">:__send__</span><span class="p">,</span> <span class="ss">:__id__</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中:</p>

<ul>
<li>冒号: 用冒号+字符串代表Symbol(名字), 表示创建了一个Symbol对象, 常用于表示方法, 可以参考<a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-rubysbl/index.html">这里</a></li>
<li>问号: 问号也是方法名的一部分,表示这个方法,返回true或者false</li>
<li>叹号: 叹号也是方法名的一部分,表示这个方法,与同名的方法(如gsub,gsub!)功能类似,但此方法会改变对象的内部属性, 相反, 另一个方法则不会修改</li>
<li>下划线: 如__send__, __id__, 为特殊命名方式, 因send太常见,可能被覆盖,用__send__可避免</li>
</ul>


<h2>字符串操作</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">## 简单</span>
</span><span class='line'><span class="s1">&#39;hello&#39;</span><span class="o">.</span><span class="n">length</span>   <span class="c1">## 5</span>
</span><span class='line'><span class="s1">&#39;hello&#39;</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;he&#39;</span><span class="p">)</span>   <span class="c1">## true</span>
</span><span class='line'><span class="s1">&#39;hello&#39;</span><span class="o">.</span><span class="n">end_with?</span><span class="p">(</span><span class="s1">&#39;he&#39;</span><span class="p">)</span>     <span class="c1">## false</span>
</span><span class='line'><span class="s1">&#39; hello &#39;</span><span class="o">.</span><span class="n">strip</span>             <span class="c1">## &#39;hello&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 字符串连接</span>
</span><span class='line'><span class="s1">&#39;hello &#39;</span> <span class="o">+</span> <span class="s1">&#39;world &#39;</span> <span class="o">+</span> <span class="mi">3</span><span class="o">.</span><span class="n">to_s</span>  <span class="c1">## &#39;hello world 3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 子字符串</span>
</span><span class='line'><span class="s1">&#39;hello world&#39;</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span>     <span class="c1">## &#39;l&#39;</span>
</span><span class='line'><span class="s1">&#39;hello world&#39;</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>   <span class="c1">## &#39;lo wo&#39;</span>
</span><span class='line'><span class="s1">&#39;hello world&#39;</span><span class="o">[</span><span class="mi">3</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="o">]</span>  <span class="c1">## &#39;lo &#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 查找</span>
</span><span class='line'><span class="s1">&#39;hello world&#39;</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s1">&#39;orl&#39;</span><span class="p">)</span>   <span class="c1">## 7</span>
</span><span class='line'><span class="s1">&#39;hello world&#39;</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="sr">/[ole]+/</span><span class="p">)</span>  <span class="c1">## 1</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 替换</span>
</span><span class='line'><span class="s1">&#39;hello world&#39;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;o&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span><span class="p">)</span>  <span class="c1">## &#39;helle werld&#39;</span>
</span><span class='line'><span class="s1">&#39;hello world&#39;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[a-z]+/</span><span class="p">,</span> <span class="s1">&#39;ok&#39;</span><span class="p">)</span>   <span class="c1">## &#39;ok ok&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 分拆</span>
</span><span class='line'><span class="s1">&#39;hello world&#39;</span><span class="o">.</span><span class="n">lines</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>     <span class="c1">## [&quot;hello &quot;, &quot;world&quot;]</span>
</span><span class='line'><span class="s2">&quot; now&#39;s  the time&quot;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>   <span class="c1">#=&gt; [&quot;now&#39;s&quot;, &quot;the&quot;, &quot;time&quot;]</span>
</span><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">//</span><span class="p">)</span>               <span class="c1">#=&gt; [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>数组操作</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span><span class="s1">&#39;two&#39;</span><span class="p">,</span><span class="s1">&#39;three&#39;</span><span class="o">].</span><span class="n">length</span>    <span class="c1">## 3</span>
</span><span class='line'><span class="o">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span><span class="s1">&#39;two&#39;</span><span class="p">,</span><span class="s1">&#39;three&#39;</span><span class="o">].</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;four&#39;</span><span class="p">)</span>   <span class="c1">## false</span>
</span><span class='line'><span class="o">[</span><span class="s1">&#39;1&#39;</span><span class="p">,</span><span class="s1">&#39;2&#39;</span><span class="p">,</span><span class="s1">&#39;3&#39;</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;4&#39;</span>            <span class="c1">## [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">][</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="o">]</span>                 <span class="c1">## [2,3]</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="o">].</span><span class="n">sort</span>                  <span class="c1">## [1,2,3,4]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">].</span><span class="n">uniq</span>                  <span class="c1">## [1,3,4]</span>
</span><span class='line'><span class="o">[</span><span class="s1">&#39;one&#39;</span><span class="p">,</span><span class="s1">&#39;two&#39;</span><span class="p">,</span><span class="s1">&#39;three&#39;</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span> <span class="c1">## &#39;one,two,three&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>函数</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">process</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iteye 博客迁移]]></title>
    <link href="http://lianghaijun.com/blog/2013-12-31-iteye-blog-migration.html"/>
    <updated>2013-12-31T15:16:16+08:00</updated>
    <id>http://lianghaijun.com/blog/iteye-blog-migration</id>
    <content type="html"><![CDATA[<p>之前一直是在iteye上写博客的, 后来建立了本博客系统后, 就希望将博客从iteye上迁移过来</p>

<p>然而iteye上博客的文章太多了, 手动一篇一篇拷贝很不现实, 所以写了个工具来辅助迁移</p>

<p>iteye2markdown是一款博客迁移工具,可以将博客从iteye迁移至octopress</p>

<ul>
<li>此工具会自动下载iteye博客上的所有文章</li>
<li>接着会将博客中的bbcode代码转换成markdown</li>
<li>下载转换后的markdown可用于octopress,迁移至自己的博客系统上</li>
</ul>


<!--more-->


<p>使用方式:</p>

<ul>
<li>修改download.rb中的cookie配置, cookie将用于连接iteye.com的后台系统, 下载博客内容</li>
<li>修改download.rb中的博客地址</li>
<li>使用以下命令</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby download.rb</span></code></pre></td></tr></table></div></figure>


<p>执行下载转换, 结果保存于blog目录中</p>

<p>源代码见:  <a href="https://github.com/seavers/iteye2markdown">github</a></p>

<p>核心代码如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>re 'open-uri'
</span><span class='line'>require 'nokogiri'
</span><span class='line'>
</span><span class='line'>def process(id, date)
</span><span class='line'>  host = 'http://seavers.iteye.com'
</span><span class='line'>  cookie = ''      #IO.read('cookie.txt')
</span><span class='line'>  agent = 'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.14 Safari/537.36'
</span><span class='line'>
</span><span class='line'>  html = open(host + '/admin/blogs/' + id + '/edit', 'User-Agent'=&gt;agent, 'Cookie'=&gt;cookie).read
</span><span class='line'>  doc = Nokogiri::HTML(html)
</span><span class='line'>
</span><span class='line'>  title = doc.search('#blog_title').attr('value').to_s
</span><span class='line'>  text = doc.search('#editor_body').text
</span><span class='line'>  category = doc.search('#blog_category_list').attr('value').to_s
</span><span class='line'>  tag = doc.search('#blog_tag_list').attr('value').to_s
</span><span class='line'>  
</span><span class='line'>
</span><span class='line'>  content = text
</span><span class='line'>      .gsub('[size=xx-large]', '#')
</span><span class='line'>      .gsub('[size=x-large]', '##')
</span><span class='line'>      .gsub('[size=large]', '###')
</span><span class='line'>      .gsub('[size=medium]', '####')
</span><span class='line'>      .gsub('[size=small]', '')
</span><span class='line'>      .gsub('[size=x-small]', '')
</span><span class='line'>      .gsub('[size=xx-small]', '')
</span><span class='line'>      .gsub('[/size]', '')
</span><span class='line'>      .gsub(/\[url=(.*)\](.*)\[\/url\]/, '[\2](\1)')
</span><span class='line'>      .gsub('[url]', '').gsub('[/url]', '')
</span><span class='line'>      .gsub('[b]', '*').gsub('[/b]', '*')
</span><span class='line'>      .gsub('[list]', '').gsub('[/list]', '')
</span><span class='line'>      .gsub('[b]', '*').gsub('[/b]', '*')
</span><span class='line'>      .gsub('[*]', '* ')
</span><span class='line'>      .gsub('[code]', '```').gsub('[ne/code]', '```')
</span><span class='line'>      .gsub(/\[code="(.*)"\]/, '```')
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  filename = date[0..9] + '-' + id + '.markdown'
</span><span class='line'>  File.open('blog/' + filename, 'w') { |file|
</span><span class='line'>      file.puts '---'
</span><span class='line'>      file.puts 'layout: post'
</span><span class='line'>      file.puts 'title: "' + title.to_s + '"'
</span><span class='line'>      file.puts 'date: ' + date + ':00 +0800'
</span><span class='line'>      file.puts 'comments: true'
</span><span class='line'>      file.puts 'categories:'
</span><span class='line'>      file.puts '- ' + category.to_s
</span><span class='line'>      file.puts 'tags:'
</span><span class='line'>      tag.split(',').each {|x|
</span><span class='line'>          file.puts '- ' + x
</span><span class='line'>      }
</span><span class='line'>      file.puts '---'
</span><span class='line'>
</span><span class='line'>      file.puts ''
</span><span class='line'>      file.puts content 
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def spider(page)
</span><span class='line'>  agent = 'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.14 Safari/537.36'
</span><span class='line'>
</span><span class='line'>  url = 'http://seavers.iteye.com/?page='+page.to_s
</span><span class='line'>  html = open(url, 'User-Agent'=&gt;agent)
</span><span class='line'>
</span><span class='line'>  doc = Nokogiri::HTML(html)
</span><span class='line'>  doc.search('.blog_main').each {|x|
</span><span class='line'>      id = x.search('h3 a').attr('href').text[/[0-9]+/, 0]
</span><span class='line'>      date = x.search('.blog_bottom .date').text
</span><span class='line'>      puts id + "\t" + date
</span><span class='line'>      process(id, date)
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  return doc.search('.pagination a.next_page').length == 0
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>##process('1416013', '2013-12-31 14:01')
</span><span class='line'>(1..100).each {|page|
</span><span class='line'>  break if spider(page)
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby spider]]></title>
    <link href="http://lianghaijun.com/blog/2013-12-23-ruby-spider.html"/>
    <updated>2013-12-23T21:19:09+08:00</updated>
    <id>http://lianghaijun.com/blog/ruby-spider</id>
    <content type="html"><![CDATA[<p>最近开始喜欢上研究ruby了,正好手头有一些抓取的需求,正好练练手</p>

<p>在写爬虫时,我们总希望能方便的实现以下功能</p>

<ul>
<li>类似curl的下载模块,提供URL即可获取下载内容</li>
<li>方便的网页分析工具,最好能提供类似css selector的元素选择器</li>
<li>简单方便的数据处理模块</li>
</ul>


<!--more-->


<p>写个简单的例子</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#encoding:utf-8
</span><span class='line'>require 'open-uri'
</span><span class='line'>require 'nokogiri'
</span><span class='line'>
</span><span class='line'>def spide
</span><span class='line'>    url = "http://home.photo.qq.com/index.php?mod=activity&act=detail&category_id=1"
</span><span class='line'>
</span><span class='line'>    html = open(url).read
</span><span class='line'>    doc = Nokogiri::HTML(html)
</span><span class='line'>
</span><span class='line'>    list = doc.search('.photo-list li img')
</span><span class='line'>    list.each { |x|
</span><span class='line'>        src = x.attr('src')
</span><span class='line'>        puts src.gsub(/400/, '800');
</span><span class='line'>    }
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>spide</span></code></pre></td></tr></table></div></figure>


<p>其中:</p>

<ol>
<li>open-uri模块用于实现curl的功能, open后read即可</li>
<li>Nokogiri为html分析模块,支持css selector式的元素选择</li>
<li>而ruby本身的特点, 则可快速处理数据</li>
</ol>


<p>抓到图片URL后,剩下的就容易多了,都下载下来吧~~</p>

<p>&#8220;`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[全屏图片查看器 fullscreen picture viewer]]></title>
    <link href="http://lianghaijun.com/blog/2013-12-16-fullscreen-picture-viewer.html"/>
    <updated>2013-12-16T23:54:34+08:00</updated>
    <id>http://lianghaijun.com/blog/fullscreen-picture-viewer</id>
    <content type="html"><![CDATA[<h2>全屏图片查看器是一个chrome扩展</h2>

<p>  可以用于全屏查看图片,当查看网页时,按f键后,会隐藏掉网页里的其它内容,只留下大图</p>

<!--more-->


<h2>举一些实际的使用场景</h2>

<ul>
<li>看一些图片时,发现旁边全是广告,直接屏蔽掉,只显示中间的大图</li>
<li>浏览壁纸时,全屏展示大图,用于观看全屏效果</li>
<li>查看所有的图片,直接寻找兴趣点</li>
</ul>


<h2>使用方式</h2>

<ul>
<li>双击网页内的空白区</li>
<li>按f键 (fullscreen的缩写)</li>
<li>按w/s按来调整threshold, 调整图片最小尺寸的阀值</li>
</ul>


<p>扩展下载: <a href="http://www.lianghaijun.com/download/fullscreen.crx">fullscreen.crx</a>
源码浏览: <a href="https://github.com/seavers/fullscreen">github</a></p>

<h2>试用</h2>

<ul>
<li>图片大小的默认阀值是350px</li>
<li>可以随便找个有大图的页面,按下f键体验一下</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hive 常用技巧]]></title>
    <link href="http://lianghaijun.com/blog/2013-12-13-hive-skill.html"/>
    <updated>2013-12-13T10:52:07+08:00</updated>
    <id>http://lianghaijun.com/blog/hive-skill</id>
    <content type="html"><![CDATA[<p>最近在使用hive来处理些大数据,偶有心得,记录之</p>

<!--more-->


<p>建表</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>create external table hive_table (
</span><span class='line'>  id int,
</span><span class='line'>  name string,
</span><span class='line'>  category string,
</span><span class='line'>  tag string
</span><span class='line'>)
</span><span class='line'>PARTITIONED BY (pt string) 
</span><span class='line'>ROW FORMAT DELIMITED
</span><span class='line'>   FIELDS TERMINATED BY ',' 
</span><span class='line'>STORED AS TEXTFILE</span></code></pre></td></tr></table></div></figure>


<p>分组统计</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select id,name,count(*),
</span><span class='line'>  count(distinct category),collect_set(category),
</span><span class='line'>  count(distinct tag),collect_set(tag)
</span><span class='line'>from hive_table
</span><span class='line'>where pt='20131213'
</span><span class='line'>group by id,name</span></code></pre></td></tr></table></div></figure>


<p>拆分多行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select id,name,category_id
</span><span class='line'>from hive_table
</span><span class='line'>lateral view explode(split(category, ',')) category_table as category_id
</span><span class='line'>where pt='20131213'</span></code></pre></td></tr></table></div></figure>


<p>过滤某些行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select h.*
</span><span class='line'>from hive_table h
</span><span class='line'>left semi join
</span><span class='line'>girl_names g
</span><span class='line'>on h.name = g.name
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux repeat]]></title>
    <link href="http://lianghaijun.com/blog/2013-12-04-linux-repeat.html"/>
    <updated>2013-12-04T15:32:01+08:00</updated>
    <id>http://lianghaijun.com/blog/linux-repeat</id>
    <content type="html"><![CDATA[<p>linux下循环执行命令, 小工具, 觉得有用, 可收录</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi ~/.bash_aliases</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repeat() {
</span><span class='line'>    n=100
</span><span class='line'>    s=1
</span><span class='line'>
</span><span class='line'>    while true; do
</span><span class='line'>        arg=$1
</span><span class='line'>        if [ "$arg" == "-n" ]; then
</span><span class='line'>            n=$2
</span><span class='line'>            shift
</span><span class='line'>            shift
</span><span class='line'>        elif [ "$arg" == "-s" ]; then
</span><span class='line'>            s=$2
</span><span class='line'>            shift
</span><span class='line'>            shift
</span><span class='line'>        else
</span><span class='line'>            break
</span><span class='line'>        fi
</span><span class='line'>    done
</span><span class='line'>
</span><span class='line'>    while [ $((n -= 1)) -ge 0 ]; do
</span><span class='line'>        "$@"
</span><span class='line'>        sleep $s
</span><span class='line'>    done
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source ~/.bash_aliases</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repeat ls -l
</span><span class='line'>repeat date
</span><span class='line'>repeat iostat
</span><span class='line'>repeat -n 3 curl 'http://www.lianghaijun.com'
</span><span class='line'>repeat -n 3 -s 300 curl 'http://www.lianghaijun.com'
</span><span class='line'>repeat -n 3 -s 0.5 sh -c "curl -I -s 'http://www.lianghaijun.com' | head -1"</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[utuntu group]]></title>
    <link href="http://lianghaijun.com/blog/2013-12-02-utuntu-group.html"/>
    <updated>2013-12-02T14:28:53+08:00</updated>
    <id>http://lianghaijun.com/blog/utuntu-group</id>
    <content type="html"><![CDATA[<p>linux用户管理中, 一直都有分组的概念, 然而我们总感觉使用场景较少, 其实是因为我们不了解</p>

<p>举个例子, 比如</p>

<ul>
<li> 在配置apache,nginx时, htdocs的目录权限, 遇到问题时, 我们总喜欢用 777,</li>
<li> 在使用samba, 或者 nfs 或者 ftp 时, 为避免复杂性, 也是 777</li>
<li> 是否希望将工作,生活的帐户体系分开, 是否希望, 使用不同的git环境</li>
</ul>


<!--more-->


<h2>基础</h2>

<ul>
<li> 每个用户都有一个主分组, 以及多个次分组, 即一个用户可以属于多个分组</li>
</ul>


<h2>常用命令</h2>

<p>分组常用的几个操作</p>

<p>查看自己的分组</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>seavers@seavers:/home/admin$ id
</span><span class='line'>uid=1000(seavers) gid=1000(seavers) groups=1000(seavers),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),109(lpadmin),124(sambashare)</span></code></pre></td></tr></table></div></figure>


<p>查看所有的分组</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /etc/group</span></code></pre></td></tr></table></div></figure>


<p>查看某个用户所在的分组</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>groups seavers</span></code></pre></td></tr></table></div></figure>


<p>增加用户到某个分组</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>usermod seavers -a -G admin </span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress 自动部署方案]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-28-octopress-deploy.html"/>
    <updated>2013-11-28T22:20:52+08:00</updated>
    <id>http://lianghaijun.com/blog/octopress-deploy</id>
    <content type="html"><![CDATA[<p>今天准备实现 octopress 的自动部署, 完成以下功能</p>

<ul>
<li>在github.com提交markdown文件后,自动触发服务器打包更新</li>
<li>服务器打包更新后, 同步至github.io, 以及服务器展示</li>
</ul>


<!--more-->


<p>实现之前, 参考了下这篇, <a href="http://imxylz.com/blog/2013/11/27/build-octopress-with-github-hook/">监听github，自动编译octopress博客</a>, 写的蛮不错的
不过, 我的方案, 有些不同的地方</p>

<h2>钩子</h2>

<p>在github的项目设置的Service Hooks中添加一个WebHook URLs的钩子</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://&lt;host&gt;:&lt;port&gt;/blog-update</span></code></pre></td></tr></table></div></figure>


<p>而github钩子, 我采用的是ruby, 命名为hook.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">server</span> <span class="o">=</span> <span class="no">TCPServer</span><span class="o">.</span><span class="n">open</span> <span class="mi">4001</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Listening on port &quot;</span> <span class="o">+</span> <span class="n">server</span><span class="o">.</span><span class="n">addr</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'>
</span><span class='line'><span class="kp">loop</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">client</span> <span class="o">=</span> <span class="n">server</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>  <span class="k">while</span><span class="p">((</span><span class="n">x</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">gets</span><span class="p">)</span> <span class="o">!=</span> <span class="s2">&quot;</span><span class="se">\r\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">x</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">client</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;HTTP/1.1 200 OK</span><span class="se">\r\n\r\n</span><span class="s2">OK&quot;</span>
</span><span class='line'>  <span class="n">client</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;OK&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">system</span><span class="p">(</span><span class="s1">&#39;git pull&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">system</span><span class="p">(</span><span class="s1">&#39;rake generate&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">##system(&#39;rake deploy&#39;)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后启动为后台进程</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="n">nohup</span> <span class="n">ruby</span> <span class="n">hook</span><span class="o">.</span><span class="n">rb</span> <span class="o">&amp;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当github更新时,会触发hook时, 服务器运行ruby代码,执行shell脚本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">pull</span>
</span><span class='line'><span class="n">rake</span> <span class="n">generate</span>
</span></code></pre></td></tr></table></div></figure>


<h2>部署</h2>

<p>那服务器上如何来更新呢, 部署的时候, 是有两种方案的,一种是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="n">preview</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后nginx代理转发至preview的端口</p>

<p>另一种方案是, nginx直接请求 _deploy 目录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">location</span> <span class="sr">/blog/</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">alias</span> <span class="o">~</span><span class="sr">/octopress/</span><span class="kp">public</span><span class="o">/</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>部署在github上</h2>

<p>当然, 如果想在github.io上部署, 需要再同步至github.io, 如在刚才在hook.rb里修改</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="n">deploy</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里要小心,这样改会死循环的.
deploy会触发git commit, commit再触发hook, hook里再deploy,再commit, 如此死循环
所以需要在hook里判断是master还是source</p>

<p>另一种解决方案, 就是把master与source, 放置在不同git仓库上
这样, 提交source的时候, 就不会触发blog的hook了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sed]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-28-sed.html"/>
    <updated>2013-11-28T16:50:01+08:00</updated>
    <id>http://lianghaijun.com/blog/sed</id>
    <content type="html"><![CDATA[<p>sed是基于行进行文本替换的神器, 这里记录一些自己常用的功能</p>

<!--more-->


<p>直接替换</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  cat data.txt | sed 's/abc/def/g'</span></code></pre></td></tr></table></div></figure>


<p>删掉空行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  cat data.txt | sed '/^$/d'</span></code></pre></td></tr></table></div></figure>


<p>删除掉第一行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  cat data.txt | sed '1d'</span></code></pre></td></tr></table></div></figure>


<p>删除掉每行的第一个字符</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  cat data.txt | sed 's/^.//g'</span></code></pre></td></tr></table></div></figure>


<p>还有一些从<a href="http://baiqiuyi.com/linux/review-sed-command-for-unix-shell-book.html">其它地方</a>拷贝过来的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sed '1,3d' file //删除1-3行
</span><span class='line'>sed '/[Aa]bc/p' file //打印包含Abc或者abc的行
</span><span class='line'>sed '/ABC/d' //删除包含ABC的行
</span><span class='line'>sed '/ABC/!d' //不删除包含ABC的行
</span><span class='line'>sed '5,$d' //从第五行到最后一行全部删除
</span><span class='line'>sed 1q  //显示第一行
</span><span class='line'>sed 's/$/.../g' //每行的最后面添加 ...
</span><span class='line'>sed 's/d.(sk)/1&/g' //满足d*sk的单词,在单词前添加sk
</span><span class='line'>sed 's/&lt;[^&gt;]*&gt;//g' //去除html标签
</span><span class='line'>sed '/ABC/a123' //在包含ABC的行后面添加一行数值为123的行
</span><span class='line'>sed '/ABC/i123' //跟a不同的是i是插入当前行的前面
</span><span class='line'>sed '/ABC/c123' //包含ABC的行将更改为123
</span><span class='line'>sed '/ABC/{n;s/123/ABC/g}' //精确匹配包含ABC的下一行,将123全部替换成ABC
</span><span class='line'>sed '/ABC/{s/A/a/}' //在包含ABC的行将A替换成a
</span><span class='line'>sed -e '/ABC/h' -e '$g' //将包含ABC的行复制,在最后一行添加.
</span><span class='line'>sed -e '/ABC/{h;d}' -e '/123/G' //将包含ABC的行复制并删除,在包含123的行后添加.
</span><span class='line'>g等于在当前行覆盖,G是在符合条件的行后新增加一行.
</span><span class='line'>sed 's/^/ /g' //每行前面增加一个空格
</span><span class='line'>sed 's/.(.)$/*1/' //将倒数第二位换成*
</span><span class='line'>sed '/ABC/!s/1/*/g' //在不包含ABC的行里,将所有的1替换成*
</span><span class='line'>sed 's/1|2|3/*/g' //在GNU里将不管是1或2或者是3替换成*</span></code></pre></td></tr></table></div></figure>


<p>还有这个
<a href="http://henter.me/post/sed-notes.html">http://henter.me/post/sed-notes.html</a>
<a href="http://blog.csdn.net/hepeng597/article/details/11269387">http://blog.csdn.net/hepeng597/article/details/11269387</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[html5版仙剑]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-27-xianjian.html"/>
    <updated>2013-11-27T23:20:11+08:00</updated>
    <id>http://lianghaijun.com/blog/xianjian</id>
    <content type="html"><![CDATA[<p>刚学习html5时, 为了练手, 基于html5写了版仙剑, <a href="http://xianjian.github.com/">http://xianjian.github.com/</a></p>

<!--more-->


<p>当时花了不少心血, 也解决了不少算法问题, 可用度80%, 然而后来比较忙, 就停止了</p>

<p>今天心血来潮, 在服务器上重新部署了一套, 欢迎试用 (图片点击右键, 新窗口打开)</p>

<p><a href="http://xianjian.u.qiniudn.com/"><img src="http://lianghaijun.com/uploads/xianjian.png" alt="xianjian" /></a></p>

<p>刚开始下载时, 速度有点慢, 请耐心等待, 后续再更改算法, 如果本地玩, 可以git clone哦~~</p>

<ul>
<li>在线试玩,可以使用<a href="http://xianjian.u.qiniudn.com">qiniudn</a> 或者 <a href="http://xianjian.github.com">github</a> 或者 <a href="http://www.lianghaijun.com/xianjian/">博客内</a></li>
<li>github地址在  <a href="https://github.com/seavers/xianjian">https://github.com/seavers/xianjian</a></li>
<li>其实还有一个java版的 <a href="https://github.com/seavers/pal">https://github.com/seavers/pal</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[about octopress]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-27-about-octopress.html"/>
    <updated>2013-11-27T18:30:41+08:00</updated>
    <id>http://lianghaijun.com/blog/about-octopress</id>
    <content type="html"><![CDATA[<p>一直以来, 都使用javaeye来记录博客, 见 <a href="http://seavers.iteye.com/">http://seavers.iteye.com/</a>, 偶有心得, 必记录之</p>

<p>然, 随着时间积累, 发现只依赖博客, 很多的需求无法满足, 如一个DEMO, 一个作品, 甚至是自定义样式
每遇新技术时, 总想折腾下, 无奈博客只能写写文字, 不能充分自主设计
现在好了, 服务器,域名 都已经OK了, 开始折腾了~~~</p>

<p>不过, 博客还是要先建起来, 前段时间, 曾折腾过 jekyll , 却半途而废了
今天突然发现 [<a href="http://www.ithans.com|yize">http://www.ithans.com|yize</a>] 改用 octopress 了, 尝试了下</p>

<p>发现 octopress 是基于ruby 写的, 还是挺好用的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake --help
</span><span class='line'>rake --tasks
</span><span class='line'>rake new_post[title]
</span><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>后续试试自动化, 外加git同步, 自动部署至服务器</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello octopress]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-27-hello-octopress.html"/>
    <updated>2013-11-27T17:56:47+08:00</updated>
    <id>http://lianghaijun.com/blog/hello-octopress</id>
    <content type="html"><![CDATA[<p>hello octopress</p>

<p>2013-11-27</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小清新网站标准]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-26-1981188.html"/>
    <updated>2013-11-26T23:19:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1981188</id>
    <content type="html"><![CDATA[<p><em>小清新网站标准</em>        纯属YY</p>

<ul>
<li>采用微博登录</li>
<li>提供iphone,android,html5版本</li>
<li>采用小新清设计原则:  色块背景, 图文混排, 配色明亮, 合适留白</li>
<li>新删改采用ajax请求, 支持滚动式翻页</li>
<li>restful url</li>
<li>icon式文字, 文字式按钮</li>
<li>赞, 评论, 分享, 收藏, 加关注</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wget 整站下载]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-26-1980761.html"/>
    <updated>2013-11-26T10:22:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1980761</id>
    <content type="html"><![CDATA[<p>下载整站</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -r -nv --restrict-file-names=nocontrol http://seavers.iteye.com/</span></code></pre></td></tr></table></div></figure>


<p>下载时可以加 -np, 不下载父目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -r -nv --restrict-file-names=nocontrol -np http://seavers.iteye.com/blog/</span></code></pre></td></tr></table></div></figure>


<p>下载时, 加入断点续传</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -r -nv -c --restrict-file-names=nocontrol http://seavers.iteye.com/</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>&mdash;restrict-file-names=nocontrol 用来解决中文乱码问题</p></li>
<li><p><a href="http://aotee.com/using-wget-recursive-download-the-entire-station">http://aotee.com/using-wget-recursive-download-the-entire-station</a></p></li>
<li><a href="http://www.cnblogs.com/lybeta/archive/2012/05/23/2514759.html">http://www.cnblogs.com/lybeta/archive/2012/05/23/2514759.html</a></li>
<li><a href="http://blog.csdn.net/flyskywhy/article/details/7777972">http://blog.csdn.net/flyskywhy/article/details/7777972</a></li>
<li><a href="http://www.butian.org/knowledge/linux/254.html">http://www.butian.org/knowledge/linux/254.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu ipconfig]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-06-1972028.html"/>
    <updated>2013-11-06T13:45:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1972028</id>
    <content type="html"><![CDATA[<p>sudo vi /sbin/ipconfig</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#! /bin/bash
</span><span class='line'>for word in `ifconfig eth0 | grep "inet addr" | sed  's/          inet addr/addr/g'`; do echo $word | sed 's/:/\t/g'; done
</span><span class='line'>route -n | awk '/UG/ {printf "gateway    %-21s %s\n", $2,$8}' ;
</span><span class='line'>grep nameserver /etc/resolv.conf ;</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo chmod +x /sbin/ipconfig
</span><span class='line'>
</span><span class='line'>ipconfig
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>待改进</p>

<ul>
<li>支持eth0 与 wlan0</li>
<li>支持dnsmasq</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu 注册 wins]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-06-1972001.html"/>
    <updated>2013-11-06T12:17:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1972001</id>
    <content type="html"><![CDATA[<p>以下是为了让ubuntu进入windows网络,实现互ping,互连</p>

<ol>
<li>ubuntu进入windows网络,必须安装samba</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install samba</span></code></pre></td></tr></table></div></figure>


<ol>
<li>修改/etc/samba/smb.conf, 将wins server修改为正确的ip
   可以在windows上, 敲入ipconfig /all得到具体ip</li>
<li>重启服务</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service nmbd restart</span></code></pre></td></tr></table></div></figure>


<ol>
<li>验证下</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmblookup -R -U &lt;wins_server_ip&gt; &lt;hostname&gt;</span></code></pre></td></tr></table></div></figure>


<ol>
<li>这时windows就可访问ubuntu,可以直接ping通</li>
<li>ubuntu互ping, 需要设置search domain</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo 'search abc.com' &gt;&gt; /etc/resolv.conf</span></code></pre></td></tr></table></div></figure>


<hr />

<ol>
<li>如果IP改变后, wins_server的缓存的ip不正确了,
可以删除以下两个文件
/var/cache/samba/wins.dat
/var/cache/samba/browse.dat
然后重启 nmbd 即可</li>
<li>如果ubuntu ping 时, ip仍然不正确, 检查下dns server
   (这块还没有搞清楚, 试试换备用server, 或者等等dns同步)</li>
<li></li>
</ol>


<hr />

<p>如果只是为了互连互通,只需要 nmbd 服务即可
如果还需要windows共享文件的服务, 需启动smbd</p>

<p>===========================================================</p>

<p>nsswitch.conf是SUN公司开发的一种扩充（name services switch）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># /etc/nsswitch.conf
</span><span class='line'>#
</span><span class='line'># Example configuration of GNU Name Service Switch functionality.
</span><span class='line'># If you have the `glibc-doc-reference' and `info' packages installed, try:
</span><span class='line'># `info libc "Name Service Switch"' for information about this file.
</span><span class='line'>
</span><span class='line'>aliases:    邮件别名, sendmail(8) 使用该文件. 
</span><span class='line'>ethers:     以太网号. 
</span><span class='line'>group:      用户组, getgrent(3) 函数使用该文件. 
</span><span class='line'>hosts:      主机名和主机号, gethostbyname(3) 以及类似的函数使用了该文件. 
</span><span class='line'>netgroup:   网络内主机及其用户的列表, 访问规则使用该文件. 
</span><span class='line'>network:    网络名及网络号, getnetent(3) 函数使用该文件. 
</span><span class='line'>passwd:     用户口令, getpwent(3) 函数使用该文件. 
</span><span class='line'>protocols:  网络协议, getprotoent(3) 函数使用该文件. 
</span><span class='line'>publickey:  NIS+及NFS 所使用的secure_rpc的公开密匙. 
</span><span class='line'>rpc:        远程过程调用名及调用号, getrpcbyname(3) 及类似函数使用该文件. 
</span><span class='line'>services:   网络服务, getservent(3) 函数使用该文件. 
</span><span class='line'>shadow:     shadow用户口令, getspnam(3) 函数使用该文件.</span></code></pre></td></tr></table></div></figure>


<p>=====================</p>

<p>hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4</p>

<ul>
<li>files:  /etc/hosts</li>
<li>mdns :  dnsmasq  avahi-daemon</li>
<li>dns  :  dns server</li>
</ul>


<p>===================</p>

<p>dnsmasq</p>

<p>Dnsmasq is a lightweight, easy to configure DNS forwarder and DHCP server.
<a href="https://wiki.archlinux.org/index.php/Dnsmasq_">https://wiki.archlinux.org/index.php/Dnsmasq_</a>(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</p>

<p>stop dnsmasq:
1. sudo vi /etc/NetworkManager/NetworkManager.conf
2. comment  dns=dnsmasq
3. sudo service network-manager restart</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu 五笔]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-04-1969731.html"/>
    <updated>2013-11-04T15:36:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1969731</id>
    <content type="html"><![CDATA[<p>ubuntu 使用五笔输入法
ubuntu 13.10 测试通过</p>

<ul>
<li>sudo apt-get install ibus-table-wubi</li>
<li>ibus-daemon -x -r -d</li>
<li>选择五笔输入,生效</li>
</ul>


<p>使用SHIFT+SPACE切换全半角
使用SHIFT切换中英文输入</p>
]]></content>
  </entry>
  
</feed>
