<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | lianghaijun的博客]]></title>
  <link href="http://lianghaijun.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://lianghaijun.com/"/>
  <updated>2014-01-19T16:20:09+08:00</updated>
  <id>http://lianghaijun.com/</id>
  <author>
    <name><![CDATA[seavers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git 与 svn 同步]]></title>
    <link href="http://lianghaijun.com/blog/2013-06-26-1894735.html"/>
    <updated>2013-06-26T15:44:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1894735</id>
    <content type="html"><![CDATA[<p>svn 与 git 保持同步</p>

<ul>
<li>先svn checkout url 把svn上的代码checkout下来</li>
<li>进入工程目录</li>
<li>git init</li>
<li>git remote add origin git@github.com:username/project.git</li>
<li>git pull</li>
<li>git branch &mdash;set-upstream master origin/master</li>
<li>git reset</li>
<li>git status</li>
<li>git commit -a -m &ldquo;update&rdquo;</li>
<li>git push</li>
</ul>


<p>其中 git reset 不好处理,可以
  git reset &mdash;hard
  svn -R revert .</p>

<p>另外:</p>

<ul>
<li>svn propget svn:ignore .</li>
<li>svn propset svn:ignore . -Fingore.txt</li>
</ul>


<p>ignore.txt 中 加入  .git .gitignore
.gitignore 中 加入  .svn</p>

<p>```
.svn
bin
target
.settings
.project
.classpath</p>

<p>/assets/node_modules
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git的本质]]></title>
    <link href="http://lianghaijun.com/blog/2013-02-17-1801066.html"/>
    <updated>2013-02-17T00:33:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1801066</id>
    <content type="html"><![CDATA[<p>git 的本质</p>

<p>配置:
git的配置操作，本质上，都是在修改config文件 (.git/config)
* git config -l</p>

<p>其中
remote.origin.fetch 与 remote.origin.url 即是 remote 的配置</p>

<ul>
<li>git remote -v 就是显示配置, git remote -v show <name> 细节</li>
<li>git remote add|rm|set-url|rename 即是增删改操作</li>
<li>git prune 是与服务器同步的功能</li>
</ul>


<p>其中
branch.master.remote 与  branch.master.merge 即是 branch的配置</p>

<ul>
<li>git branch -v 就是显示配置</li>
<li>git branch <branchName>|-m|-d 就是增删改的操作</li>
<li>git branch &mdash;set-upstream 设置分支对应的 remote</li>
</ul>


<p>分支名:
git 命令，使用分支时，需要一个名字， 如origin/master, refs/remotes/origin/HEAD等
其实，可以参考 .git/refs目录， 就明白了</p>

<ul>
<li>heads 代表本地分支</li>
<li>remotes 代表远程分支</li>
<li>tag 代表tags分支</li>
<li>master 与 HEAD 同义</li>
</ul>


<p>当我们需要使用分支时，语法大致是这样的  (refs/)? (heads/|remotes/|tags/)? <name>
即，refs 或者 heads 等， 都是可以省略的， git 会遍历查询
假如有冲突时， git报错 warngin: refname &lsquo;&hellip;&rsquo; is ambiguous ， 但还会执行第一个</p>

<p>当然还有更精确及表示更多标识的方式， 即 commitId
而 tag 只是将 commitId 取了一个容易记忆的名字
而 分支，远程分支，可以理解为是一个 commitId 的有序列表（可变数组）</p>

<p>分支操作:
假如将远程仓库也看成是一个个本地分支的话， 就会明白了</p>

<ul>
<li>git pull 就是  git merge origin/master</li>
<li>git reset <commit> 就是 还原至某分支的状态    (会根据参数，还原 文件，index, commit)</li>
<li>git rebase 可以看作是另一种merge操作， 算法不同</li>
</ul>


<p>操作index
* git add    追加 index
* git rm     删除文件，以追加index
* git mv     移动文件，并追加index
* git reset  清除uncommit的index</p>

<p>clone
* 这个大家都知道了，就是一系列git操作的组合</p>

<p>checkout
* 就是在操作HEAD的位置</p>

<p>git
* git的所有操作，如果理解清每个命令， 是如何操作 file, index, commit, branch 的，就都理解了</p>
]]></content>
  </entry>
  
</feed>
