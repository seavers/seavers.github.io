<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | lianghaijun]]></title>
  <link href="http://seavers.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://seavers.github.io/"/>
  <updated>2013-11-29T14:20:52+08:00</updated>
  <id>http://seavers.github.io/</id>
  <author>
    <name><![CDATA[seavers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress 自动部署方案]]></title>
    <link href="http://seavers.github.io/blog/2013/11/28/octopress-deploy/"/>
    <updated>2013-11-28T22:20:52+08:00</updated>
    <id>http://seavers.github.io/blog/2013/11/28/octopress-deploy</id>
    <content type="html"><![CDATA[<p>今天准备实现 octopress 的自动部署, 完成以下功能</p>

<ul>
<li>在github.com提交markdown文件后,自动触发服务器打包更新</li>
<li>服务器打包更新后, 同步至github.io, 以及服务器展示</li>
</ul>


<p>实现之前, 参考了下这篇, <a href="http://imxylz.com/blog/2013/11/27/build-octopress-with-github-hook/">监听github，自动编译octopress博客</a>, 写的蛮不错的
不过, 我的方案, 有些不同的地方</p>

<h2>钩子</h2>

<p>在github的项目设置的Service Hooks中添加一个WebHook URLs的钩子
```</p>

<pre><code>http://blog.lianghaijun.com:4001/blog-update
</code></pre>

<p><code>
而github钩子, 我采用的是ruby, 命名为hook.rb
</code>ruby
require &lsquo;socket&rsquo;</p>

<p>server = TCPServer.open 4001
puts &ldquo;Listening on port &rdquo; + server.addr[1].to_s</p>

<p>loop {
  client = server.accept()
  while((x = client.gets) != &ldquo;\r\n&rdquo;)</p>

<pre><code>puts x
</code></pre>

<p>  end</p>

<p>  client.puts &ldquo;HTTP/1.1 200 OK\r\n\r\nOK&rdquo;
  client.close
  puts &lsquo;OK&rsquo;</p>

<p>  system(&lsquo;git pull&rsquo;)
  system(&lsquo;rake generate&rsquo;)
  ##system(&lsquo;rake deploy&rsquo;)
  puts &lsquo;&rsquo;
}
<code>
然后启动为后台进程
</code>
   nohup ruby hook.rb &amp;
<code>
当github更新时,会触发hook时, 服务器运行ruby代码,执行shell脚本
</code></p>

<pre><code>git pull
rake generate
</code></pre>

<p>```</p>

<h2>部署</h2>

<p>那服务器上如何来更新呢, 部署的时候, 是有两种方案的,一种是
```</p>

<pre><code>rake preview
</code></pre>

<p>```
然后nginx代理转发至preview的端口</p>

<p>另一种方案是, nginx直接请求 _deploy 目录
```</p>

<pre><code>location /blog/ {
    alias ~/octopress/public/;
}
</code></pre>

<p>```</p>

<h2>部署在github上</h2>

<p>当然, 如果想在github.io上部署, 需要再同步至github.io, 如在刚才在hook.rb里修改
```</p>

<pre><code>rake deploy
</code></pre>

<p>```
这里要小心,这样改会死循环的.
deploy会触发git commit, commit再触发hook, hook里再deploy,再commit, 如此死循环
所以需要在hook里判断是master还是source</p>

<p>另一种解决方案, 就是把master与source, 放置在不同git仓库上
这样, 提交source的时候, 就不会触发blog的hook了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Octopress]]></title>
    <link href="http://seavers.github.io/blog/2013/11/27/about-octopress/"/>
    <updated>2013-11-27T18:30:41+08:00</updated>
    <id>http://seavers.github.io/blog/2013/11/27/about-octopress</id>
    <content type="html"><![CDATA[<p>一直以来, 都使用javaeye来记录博客, 见 <a href="http://seavers.iteye.com/">http://seavers.iteye.com/</a>, 偶有心得, 必记录之</p>

<p>然, 随着时间积累, 发现只依赖博客, 很多的需求无法满足, 如一个DEMO, 一个作品, 甚至是自定义样式
每遇新技术时, 总想折腾下, 无奈博客只能写写文字, 不能充分自主设计
现在好了, 服务器,域名 都已经OK了, 开始折腾了~~~</p>

<p>不过, 博客还是要先建起来, 前段时间, 曾折腾过 jekyll , 却半途而废了
今天突然发现 [<a href="http://www.ithans.com|yize">http://www.ithans.com|yize</a>] 改用 octopress 了, 尝试了下</p>

<p>发现 octopress 是基于ruby 写的, 还是挺好用的</p>

<p><code>
rake --help
rake --tasks
rake new_post[title]
rake generate
rake deploy
</code></p>

<p>后续试试自动化, 外加git同步, 自动部署至服务器</p>
]]></content>
  </entry>
  
</feed>
