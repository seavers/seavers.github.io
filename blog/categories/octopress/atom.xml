<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | lianghaijun的博客]]></title>
  <link href="http://lianghaijun.com/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://lianghaijun.com/"/>
  <updated>2014-01-19T16:20:09+08:00</updated>
  <id>http://lianghaijun.com/</id>
  <author>
    <name><![CDATA[seavers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iteye 博客迁移]]></title>
    <link href="http://lianghaijun.com/blog/2013-12-31-iteye-blog-migration.html"/>
    <updated>2013-12-31T15:16:16+08:00</updated>
    <id>http://lianghaijun.com/blog/iteye-blog-migration</id>
    <content type="html"><![CDATA[<p>之前一直是在iteye上写博客的, 后来建立了本博客系统后, 就希望将博客从iteye上迁移过来</p>

<p>然而iteye上博客的文章太多了, 手动一篇一篇拷贝很不现实, 所以写了个工具来辅助迁移</p>

<p>iteye2markdown是一款博客迁移工具,可以将博客从iteye迁移至octopress</p>

<ul>
<li>此工具会自动下载iteye博客上的所有文章</li>
<li>接着会将博客中的bbcode代码转换成markdown</li>
<li>下载转换后的markdown可用于octopress,迁移至自己的博客系统上</li>
</ul>


<!--more-->


<p>使用方式:</p>

<ul>
<li>修改download.rb中的cookie配置, cookie将用于连接iteye.com的后台系统, 下载博客内容</li>
<li>修改download.rb中的博客地址</li>
<li>使用以下命令
<code>
ruby download.rb
</code>
执行下载转换, 结果保存于blog目录中</li>
</ul>


<p>源代码见:  <a href="https://github.com/seavers/iteye2markdown">github</a></p>

<p>核心代码如下:
```
re &lsquo;open-uri&rsquo;
require &lsquo;nokogiri&rsquo;</p>

<p>def process(id, date)</p>

<pre><code>host = 'http://seavers.iteye.com'
cookie = ''      #IO.read('cookie.txt')
agent = 'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.14 Safari/537.36'

html = open(host + '/admin/blogs/' + id + '/edit', 'User-Agent'=&gt;agent, 'Cookie'=&gt;cookie).read
doc = Nokogiri::HTML(html)

title = doc.search('#blog_title').attr('value').to_s
text = doc.search('#editor_body').text
category = doc.search('#blog_category_list').attr('value').to_s
tag = doc.search('#blog_tag_list').attr('value').to_s


content = text
    .gsub('[size=xx-large]', '#')
    .gsub('[size=x-large]', '##')
    .gsub('[size=large]', '###')
    .gsub('[size=medium]', '####')
    .gsub('[size=small]', '')
    .gsub('[size=x-small]', '')
    .gsub('[size=xx-small]', '')
    .gsub('[/size]', '')
    .gsub(/\[url=(.*)\](.*)\[\/url\]/, '[\2](\1)')
    .gsub('[url]', '').gsub('[/url]', '')
    .gsub('[b]', '*').gsub('[/b]', '*')
    .gsub('[list]', '').gsub('[/list]', '')
    .gsub('[b]', '*').gsub('[/b]', '*')
    .gsub('[*]', '* ')
    .gsub('[code]', '```').gsub('[ne/code]', '```')
    .gsub(/\[code="(.*)"\]/, '```')


filename = date[0..9] + '-' + id + '.markdown'
File.open('blog/' + filename, 'w') { |file|
    file.puts '---'
    file.puts 'layout: post'
    file.puts 'title: "' + title.to_s + '"'
    file.puts 'date: ' + date + ':00 +0800'
    file.puts 'comments: true'
    file.puts 'categories:'
    file.puts '- ' + category.to_s
    file.puts 'tags:'
    tag.split(',').each {|x|
        file.puts '- ' + x
    }
    file.puts '---'

    file.puts ''
    file.puts content 
}
</code></pre>

<p>end</p>

<p>def spider(page)</p>

<pre><code>agent = 'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.14 Safari/537.36'

url = 'http://seavers.iteye.com/?page='+page.to_s
html = open(url, 'User-Agent'=&gt;agent)

doc = Nokogiri::HTML(html)
doc.search('.blog_main').each {|x|
    id = x.search('h3 a').attr('href').text[/[0-9]+/, 0]
    date = x.search('.blog_bottom .date').text
    puts id + "\t" + date
    process(id, date)
}

return doc.search('.pagination a.next_page').length == 0
</code></pre>

<p>end</p>

<h2>process(&lsquo;1416013&rsquo;, &lsquo;2013-12-31 14:01&rsquo;)</h2>

<p>(1..100).each {|page|</p>

<pre><code>break if spider(page)
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress 自动部署方案]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-28-octopress-deploy.html"/>
    <updated>2013-11-28T22:20:52+08:00</updated>
    <id>http://lianghaijun.com/blog/octopress-deploy</id>
    <content type="html"><![CDATA[<p>今天准备实现 octopress 的自动部署, 完成以下功能</p>

<ul>
<li>在github.com提交markdown文件后,自动触发服务器打包更新</li>
<li>服务器打包更新后, 同步至github.io, 以及服务器展示</li>
</ul>


<!--more-->


<p>实现之前, 参考了下这篇, <a href="http://imxylz.com/blog/2013/11/27/build-octopress-with-github-hook/">监听github，自动编译octopress博客</a>, 写的蛮不错的
不过, 我的方案, 有些不同的地方</p>

<h2>钩子</h2>

<p>在github的项目设置的Service Hooks中添加一个WebHook URLs的钩子
```</p>

<pre><code>http://&lt;host&gt;:&lt;port&gt;/blog-update
</code></pre>

<p><code>
而github钩子, 我采用的是ruby, 命名为hook.rb
</code>ruby
require &lsquo;socket&rsquo;</p>

<p>server = TCPServer.open 4001
puts &ldquo;Listening on port &rdquo; + server.addr[1].to_s</p>

<p>loop {
  client = server.accept()
  while((x = client.gets) != &ldquo;\r\n&rdquo;)</p>

<pre><code>puts x
</code></pre>

<p>  end</p>

<p>  client.puts &ldquo;HTTP/1.1 200 OK\r\n\r\nOK&rdquo;
  client.close
  puts &lsquo;OK&rsquo;</p>

<p>  system(&lsquo;git pull&rsquo;)
  system(&lsquo;rake generate&rsquo;)
  ##system(&lsquo;rake deploy&rsquo;)
  puts &lsquo;&rsquo;
}
<code>
然后启动为后台进程
</code>
   nohup ruby hook.rb &amp;
<code>
当github更新时,会触发hook时, 服务器运行ruby代码,执行shell脚本
</code></p>

<pre><code>git pull
rake generate
</code></pre>

<p>```</p>

<h2>部署</h2>

<p>那服务器上如何来更新呢, 部署的时候, 是有两种方案的,一种是
```</p>

<pre><code>rake preview
</code></pre>

<p>```
然后nginx代理转发至preview的端口</p>

<p>另一种方案是, nginx直接请求 _deploy 目录
```</p>

<pre><code>location /blog/ {
    alias ~/octopress/public/;
}
</code></pre>

<p>```</p>

<h2>部署在github上</h2>

<p>当然, 如果想在github.io上部署, 需要再同步至github.io, 如在刚才在hook.rb里修改
```</p>

<pre><code>rake deploy
</code></pre>

<p>```
这里要小心,这样改会死循环的.
deploy会触发git commit, commit再触发hook, hook里再deploy,再commit, 如此死循环
所以需要在hook里判断是master还是source</p>

<p>另一种解决方案, 就是把master与source, 放置在不同git仓库上
这样, 提交source的时候, 就不会触发blog的hook了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[about octopress]]></title>
    <link href="http://lianghaijun.com/blog/2013-11-27-about-octopress.html"/>
    <updated>2013-11-27T18:30:41+08:00</updated>
    <id>http://lianghaijun.com/blog/about-octopress</id>
    <content type="html"><![CDATA[<p>一直以来, 都使用javaeye来记录博客, 见 <a href="http://seavers.iteye.com/">http://seavers.iteye.com/</a>, 偶有心得, 必记录之</p>

<p>然, 随着时间积累, 发现只依赖博客, 很多的需求无法满足, 如一个DEMO, 一个作品, 甚至是自定义样式
每遇新技术时, 总想折腾下, 无奈博客只能写写文字, 不能充分自主设计
现在好了, 服务器,域名 都已经OK了, 开始折腾了~~~</p>

<p>不过, 博客还是要先建起来, 前段时间, 曾折腾过 jekyll , 却半途而废了
今天突然发现 [<a href="http://www.ithans.com|yize">http://www.ithans.com|yize</a>] 改用 octopress 了, 尝试了下</p>

<p>发现 octopress 是基于ruby 写的, 还是挺好用的</p>

<p><code>
rake --help
rake --tasks
rake new_post[title]
rake generate
rake deploy
</code></p>

<p>后续试试自动化, 外加git同步, 自动部署至服务器</p>
]]></content>
  </entry>
  
</feed>
