<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: maven | lianghaijun的博客]]></title>
  <link href="http://lianghaijun.com/blog/categories/maven/atom.xml" rel="self"/>
  <link href="http://lianghaijun.com/"/>
  <updated>2013-12-31T14:35:25+08:00</updated>
  <id>http://lianghaijun.com/</id>
  <author>
    <name><![CDATA[seavers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[maven的全局去除依赖]]></title>
    <link href="http://lianghaijun.com/blog/1944892"/>
    <updated>2013-09-22T15:01:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1944892</id>
    <content type="html"><![CDATA[<p>我们在maven中有时候希望将某个依赖包彻底去除</p>

<p>如我们的系统使用的是spring3.1.2, 但是依赖的二方包中, 总是或多或少依赖了spring2.5.6, 希望有个方法, 能全局去除掉</p>

<!-- globally exclusion -->


<p><dependency></p>

<pre><code>&lt;groupId&gt;org.springframework&lt;/groupId&gt;
&lt;artifactId&gt;spring&lt;/artifactId&gt;
&lt;version&gt;2.5.6.SEC03&lt;/version&gt;
&lt;scope&gt;provided&lt;/scope&gt;
</code></pre>

<p></dependency>
```</p>

<p>以上方式, 有个弊端, 就是eclipse中, 还是会依赖, 且容易用混</p>

<p>有三个方案(建议使用第三种)
```
<dependency></p>

<pre><code>&lt;groupId&gt;org.springframework&lt;/groupId&gt;
&lt;artifactId&gt;spring&lt;/artifactId&gt;
&lt;version&gt;99.0-does-not-exist&lt;/version&gt;
&lt;scope&gt;provided&lt;/scope&gt;
</code></pre>

<p></dependency>
```</p>

<p>```
<dependency></p>

<pre><code>&lt;groupId&gt;org.springframework&lt;/groupId&gt;
&lt;artifactId&gt;spring&lt;/artifactId&gt;
&lt;version&gt;2.5.6&lt;/version&gt;
&lt;scope&gt;system&lt;/scope&gt;
&lt;systemPath&gt;${basedir}/lib/empty.jar&lt;/systemPath&gt;
</code></pre>

<p></dependency>
```</p>

<p>```</p>

<pre><code>        &lt;plugin&gt;
            &lt;artifactId&gt;maven-eclipse-plugin&lt;/artifactId&gt;
            &lt;configuration&gt;
                &lt;downloadSources&gt;true&lt;/downloadSources&gt;
                &lt;downloadJavadocs&gt;true&lt;/downloadJavadocs&gt;
                &lt;classpathContainers&gt;
                    &lt;classpathContainer&gt;org.eclipse.jdt.launching.JRE_CONTAINER&lt;/classpathContainer&gt;
                &lt;/classpathContainers&gt;
                &lt;excludes&gt;
                    &lt;exclude&gt;org.springframework:spring&lt;/exclude&gt;
                &lt;/excludes&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu安装maven3]]></title>
    <link href="http://lianghaijun.com/blog/1895665"/>
    <updated>2013-06-28T13:39:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1895665</id>
    <content type="html"><![CDATA[<p>ubuntu 安装 maven3的方法就是</p>

<p><code>
  sudo apt-get install maven
</code></p>

<p>一直以来, 以为 install maven安装的是 maven1.x
而 install maven2 安装的是 maven2.x
而看到某些论坛说安装maven3, 要使用 ppa ,
后来才知道错了</p>

<p>install maven 安装的就是最新版本的maven</p>

<p>在  12.04, 13.04 测试通过</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[maven 多环境配置]]></title>
    <link href="http://lianghaijun.com/blog/1853687"/>
    <updated>2013-06-03T19:56:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1853687</id>
    <content type="html"><![CDATA[<p>maven多环境配置</p>

<p>比较常见的maven的多环境配置</p>

<p>```
<build>
  <resources></p>

<pre><code> &lt;resource&gt;
   &lt;directory&gt;src/main/resources&lt;/directory&gt;
     &lt;filtering&gt;true&lt;/filtering&gt;
 &lt;/resource&gt;
</code></pre>

<p>  </resources>
  <profiles></p>

<pre><code>&lt;profile&gt;
  &lt;id&gt;development&lt;/id&gt;
  &lt;activation&gt;
    &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
  &lt;/activation&gt;
  &lt;filters&gt;
    &lt;filter&gt;src/main/resources/profile/development.properties&lt;/filter&gt;
  &lt;/filters&gt;
&lt;/profile&gt;
&lt;profile&gt;
  &lt;id&gt;production&lt;/id&gt;
  &lt;filters&gt;
    &lt;filter&gt;src/main/resources/profile/production.properties&lt;/filter&gt;
  &lt;/filters&gt;
 &lt;/profile&gt;
</code></pre>

<p>  </profiles>
</build>
```</p>

<p>```</p>

<pre><code>mvn jetty:run
mvn jetty:run -Pproduction
</code></pre>

<p>```</p>

<p>当没有写P参数时，采用development的profile,若指定，则使用指定的profile</p>

<p>另外一种写，个人认为比较优化
```
<properties>
  <env>development</env>
<build>
  <filters></p>

<pre><code>&lt;filter&gt;src/main/resources/profile/${env}.properties&lt;/filter&gt;
</code></pre>

<p>  </filters>
  <resources></p>

<pre><code> &lt;resource&gt;
   &lt;directory&gt;src/main/resources&lt;/directory&gt;
     &lt;filtering&gt;true&lt;/filtering&gt;
 &lt;/resource&gt;
</code></pre>

<p>  </resources>
</build>
```</p>

<p><code>
   mvn jetty:run
   mvn jetty:run -Denv=production
</code></p>

<p>默认的采用properties中的配置，不同的环境采用指定的参数</p>

<hr />

<p>多环境需要注意的点：
1. 在切换环境时，不能改动源代码，如操作系统，线上线下，切换数据库等
2. 源代码独立于环境配置，或配置文件独立，或切换环境名称
3. 环境所有配置独立，需独立server管理
4. 环境名称切换，则可扩展性不强，但适应性强，管理方便</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[maven 多环境配置]]></title>
    <link href="http://lianghaijun.com/blog/1853687"/>
    <updated>2013-04-25T17:29:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1853687</id>
    <content type="html"><![CDATA[<p>maven多环境配置</p>

<p>比较常见的maven的多环境配置</p>

<p>```
<build>
  <resources></p>

<pre><code> &lt;resource&gt;
   &lt;directory&gt;src/main/resources&lt;/directory&gt;
     &lt;filtering&gt;true&lt;/filtering&gt;
 &lt;/resource&gt;
</code></pre>

<p>  </resources>
  <profiles></p>

<pre><code>&lt;profile&gt;
  &lt;id&gt;development&lt;/id&gt;
  &lt;activation&gt;
    &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
  &lt;/activation&gt;
  &lt;filters&gt;
    &lt;filter&gt;src/main/resources/profile/development.properties&lt;/filter&gt;
  &lt;/filters&gt;
&lt;/profile&gt;
&lt;profile&gt;
  &lt;id&gt;production&lt;/id&gt;
  &lt;filters&gt;
    &lt;filter&gt;src/main/resources/profile/production.properties&lt;/filter&gt;
  &lt;/filters&gt;
 &lt;/profile&gt;
</code></pre>

<p>  </profiles>
</build>
```</p>

<p>```</p>

<pre><code>mvn jetty:run
mvn jetty:run -Pproduction
</code></pre>

<p>```</p>

<p>当没有写P参数时，采用development的profile,若指定，则使用指定的profile</p>

<p>另外一种写，个人认为比较优化
```
<properties>
  <env>development</env>
<build>
  <filters></p>

<pre><code>&lt;filter&gt;src/main/resources/profile/${env}.properties&lt;/filter&gt;
</code></pre>

<p>  </filters>
  <resources></p>

<pre><code> &lt;resource&gt;
   &lt;directory&gt;src/main/resources&lt;/directory&gt;
     &lt;filtering&gt;true&lt;/filtering&gt;
 &lt;/resource&gt;
</code></pre>

<p>  </resources>
</build>
```</p>

<p><code>
   mvn jetty:run
   mvn jetty:run -Denv=production
</code></p>

<p>默认的采用properties中的配置，不同的环境采用指定的参数</p>

<hr />

<p>多环境需要注意的点：
1. 在切换环境时，不能改动源代码，如操作系统，线上线下，切换数据库等
2. 源代码独立于环境配置，或配置文件独立，或切换环境名称
3. 环境所有配置独立，需独立server管理
4. 环境名称切换，则可扩展性不强，但适应性强，管理方便</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[maven常用技巧]]></title>
    <link href="http://lianghaijun.com/blog/1834993"/>
    <updated>2013-03-22T17:19:00+08:00</updated>
    <id>http://lianghaijun.com/blog/1834993</id>
    <content type="html"><![CDATA[<p>maven常用技巧</p>

<p>[size=large]限定只使用内置的archetypes
mvn archetype:generate -DarchetypeCatalog=internal```</p>

<p>mvn创建spring mvc
[url]<a href="https://github.com/kolorobot/spring-mvc-quickstart-archetype">https://github.com/kolorobot/spring-mvc-quickstart-archetype</a>[/url]</p>

<p>mvn archetype:generate -DarchetypeGroupId=com.github.spring-mvc-archetypes -DarchetypeArtifactId=spring-mvc-quickstart -DarchetypeVersion=1.0.0-SNAPSHOT -DgroupId=hello -DartifactId=hello -Dversion=1.0.0
```</p>
]]></content>
  </entry>
  
</feed>
